
Board_STM32F4VE_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000671c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080068ac  080068ac  000078ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006914  08006914  0000cc00  2**0
                  CONTENTS
  4 .ARM          00000008  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800691c  0800691c  0000cc00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800691c  0800691c  0000791c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006920  08006920  00007920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006924  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00003c00  10000000  08006984  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000126c  20000060  20000060  0000d060  2**2
                  ALLOC
 11 ._user_heap_stack 00000504  200012cc  200012cc  0000d060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000cc00  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025ca7  00000000  00000000  0000cc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005518  00000000  00000000  000328d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce8  00000000  00000000  00037df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001653  00000000  00000000  00039ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027de0  00000000  00000000  0003b12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025005  00000000  00000000  00062f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e430b  00000000  00000000  00087f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000044  00000000  00000000  0016c21b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b2c  00000000  00000000  0016c260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000151  00000000  00000000  00173d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__aeabi_uldivmod>:
 8000190:	b953      	cbnz	r3, 80001a8 <__aeabi_uldivmod+0x18>
 8000192:	b94a      	cbnz	r2, 80001a8 <__aeabi_uldivmod+0x18>
 8000194:	2900      	cmp	r1, #0
 8000196:	bf08      	it	eq
 8000198:	2800      	cmpeq	r0, #0
 800019a:	bf1c      	itt	ne
 800019c:	f04f 31ff 	movne.w	r1, #4294967295
 80001a0:	f04f 30ff 	movne.w	r0, #4294967295
 80001a4:	f000 b80c 	b.w	80001c0 <__aeabi_idiv0>
 80001a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b0:	f006 fa12 	bl	80065d8 <__udivmoddi4>
 80001b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr

080001c0 <__aeabi_idiv0>:
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop

080001c4 <deregister_tm_clones>:
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <deregister_tm_clones+0x10>)
 80001c6:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <deregister_tm_clones+0x14>)
 80001c8:	4283      	cmp	r3, r0
 80001ca:	d002      	beq.n	80001d2 <deregister_tm_clones+0xe>
 80001cc:	4b03      	ldr	r3, [pc, #12]	@ (80001dc <deregister_tm_clones+0x18>)
 80001ce:	b103      	cbz	r3, 80001d2 <deregister_tm_clones+0xe>
 80001d0:	4718      	bx	r3
 80001d2:	4770      	bx	lr
 80001d4:	20000060 	.word	0x20000060
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000

080001e0 <register_tm_clones>:
 80001e0:	4805      	ldr	r0, [pc, #20]	@ (80001f8 <register_tm_clones+0x18>)
 80001e2:	4b06      	ldr	r3, [pc, #24]	@ (80001fc <register_tm_clones+0x1c>)
 80001e4:	1a1b      	subs	r3, r3, r0
 80001e6:	0fd9      	lsrs	r1, r3, #31
 80001e8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001ec:	1049      	asrs	r1, r1, #1
 80001ee:	d002      	beq.n	80001f6 <register_tm_clones+0x16>
 80001f0:	4b03      	ldr	r3, [pc, #12]	@ (8000200 <register_tm_clones+0x20>)
 80001f2:	b103      	cbz	r3, 80001f6 <register_tm_clones+0x16>
 80001f4:	4718      	bx	r3
 80001f6:	4770      	bx	lr
 80001f8:	20000060 	.word	0x20000060
 80001fc:	20000060 	.word	0x20000060
 8000200:	00000000 	.word	0x00000000

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c06      	ldr	r4, [pc, #24]	@ (8000220 <__do_global_dtors_aux+0x1c>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b943      	cbnz	r3, 800021e <__do_global_dtors_aux+0x1a>
 800020c:	f7ff ffda 	bl	80001c4 <deregister_tm_clones>
 8000210:	4b04      	ldr	r3, [pc, #16]	@ (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	b113      	cbz	r3, 800021a <__do_global_dtors_aux+0x16>
 8000214:	4804      	ldr	r0, [pc, #16]	@ (8000228 <__do_global_dtors_aux+0x24>)
 8000216:	f3af 8000 	nop.w
 800021a:	2301      	movs	r3, #1
 800021c:	7023      	strb	r3, [r4, #0]
 800021e:	bd10      	pop	{r4, pc}
 8000220:	20000060 	.word	0x20000060
 8000224:	00000000 	.word	0x00000000
 8000228:	08006894 	.word	0x08006894

0800022c <frame_dummy>:
 800022c:	b508      	push	{r3, lr}
 800022e:	4b05      	ldr	r3, [pc, #20]	@ (8000244 <frame_dummy+0x18>)
 8000230:	b11b      	cbz	r3, 800023a <frame_dummy+0xe>
 8000232:	4905      	ldr	r1, [pc, #20]	@ (8000248 <frame_dummy+0x1c>)
 8000234:	4805      	ldr	r0, [pc, #20]	@ (800024c <frame_dummy+0x20>)
 8000236:	f3af 8000 	nop.w
 800023a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023e:	f7ff bfcf 	b.w	80001e0 <register_tm_clones>
 8000242:	bf00      	nop
 8000244:	00000000 	.word	0x00000000
 8000248:	20000064 	.word	0x20000064
 800024c:	08006894 	.word	0x08006894

08000250 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000254:	4b16      	ldr	r3, [pc, #88]	@ (80002b0 <MX_CAN1_Init+0x60>)
 8000256:	4a17      	ldr	r2, [pc, #92]	@ (80002b4 <MX_CAN1_Init+0x64>)
 8000258:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800025a:	4b15      	ldr	r3, [pc, #84]	@ (80002b0 <MX_CAN1_Init+0x60>)
 800025c:	2210      	movs	r2, #16
 800025e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000260:	4b13      	ldr	r3, [pc, #76]	@ (80002b0 <MX_CAN1_Init+0x60>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000266:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <MX_CAN1_Init+0x60>)
 8000268:	2200      	movs	r2, #0
 800026a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800026c:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <MX_CAN1_Init+0x60>)
 800026e:	2200      	movs	r2, #0
 8000270:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000272:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <MX_CAN1_Init+0x60>)
 8000274:	2200      	movs	r2, #0
 8000276:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000278:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <MX_CAN1_Init+0x60>)
 800027a:	2200      	movs	r2, #0
 800027c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800027e:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <MX_CAN1_Init+0x60>)
 8000280:	2200      	movs	r2, #0
 8000282:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000284:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <MX_CAN1_Init+0x60>)
 8000286:	2200      	movs	r2, #0
 8000288:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800028a:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <MX_CAN1_Init+0x60>)
 800028c:	2200      	movs	r2, #0
 800028e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000290:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <MX_CAN1_Init+0x60>)
 8000292:	2200      	movs	r2, #0
 8000294:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000296:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <MX_CAN1_Init+0x60>)
 8000298:	2200      	movs	r2, #0
 800029a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800029c:	4804      	ldr	r0, [pc, #16]	@ (80002b0 <MX_CAN1_Init+0x60>)
 800029e:	f000 fe21 	bl	8000ee4 <HAL_CAN_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80002a8:	f000 fac0 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	2000007c 	.word	0x2000007c
 80002b4:	40006400 	.word	0x40006400

080002b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	@ 0x28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a21      	ldr	r2, [pc, #132]	@ (800035c <HAL_CAN_MspInit+0xa4>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d13b      	bne.n	8000352 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002da:	2300      	movs	r3, #0
 80002dc:	613b      	str	r3, [r7, #16]
 80002de:	4b20      	ldr	r3, [pc, #128]	@ (8000360 <HAL_CAN_MspInit+0xa8>)
 80002e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000360 <HAL_CAN_MspInit+0xa8>)
 80002e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80002ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000360 <HAL_CAN_MspInit+0xa8>)
 80002ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	4b19      	ldr	r3, [pc, #100]	@ (8000360 <HAL_CAN_MspInit+0xa8>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fe:	4a18      	ldr	r2, [pc, #96]	@ (8000360 <HAL_CAN_MspInit+0xa8>)
 8000300:	f043 0308 	orr.w	r3, r3, #8
 8000304:	6313      	str	r3, [r2, #48]	@ 0x30
 8000306:	4b16      	ldr	r3, [pc, #88]	@ (8000360 <HAL_CAN_MspInit+0xa8>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030a:	f003 0308 	and.w	r3, r3, #8
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000312:	2303      	movs	r3, #3
 8000314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800031e:	2303      	movs	r3, #3
 8000320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000322:	2309      	movs	r3, #9
 8000324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	480d      	ldr	r0, [pc, #52]	@ (8000364 <HAL_CAN_MspInit+0xac>)
 800032e:	f001 fabd 	bl	80018ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	2102      	movs	r1, #2
 8000336:	2013      	movs	r0, #19
 8000338:	f000 ff88 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800033c:	2013      	movs	r0, #19
 800033e:	f000 ffa1 	bl	8001284 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	2102      	movs	r1, #2
 8000346:	2014      	movs	r0, #20
 8000348:	f000 ff80 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800034c:	2014      	movs	r0, #20
 800034e:	f000 ff99 	bl	8001284 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000352:	bf00      	nop
 8000354:	3728      	adds	r7, #40	@ 0x28
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40006400 	.word	0x40006400
 8000360:	40023800 	.word	0x40023800
 8000364:	40020c00 	.word	0x40020c00

08000368 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_CRC_Init+0x20>)
 800036e:	4a07      	ldr	r2, [pc, #28]	@ (800038c <MX_CRC_Init+0x24>)
 8000370:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_CRC_Init+0x20>)
 8000374:	f000 ff94 	bl	80012a0 <HAL_CRC_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800037e:	f000 fa55 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000a4 	.word	0x200000a4
 800038c:	40023000 	.word	0x40023000

08000390 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0b      	ldr	r2, [pc, #44]	@ (80003cc <HAL_CRC_MspInit+0x3c>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d10d      	bne.n	80003be <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <HAL_CRC_MspInit+0x40>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	4a09      	ldr	r2, [pc, #36]	@ (80003d0 <HAL_CRC_MspInit+0x40>)
 80003ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003b2:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <HAL_CRC_MspInit+0x40>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40023000 	.word	0x40023000
 80003d0:	40023800 	.word	0x40023800

080003d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_DMA_Init+0x3c>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <MX_DMA_Init+0x3c>)
 80003e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003ea:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_DMA_Init+0x3c>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 3, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2103      	movs	r1, #3
 80003fa:	203a      	movs	r0, #58	@ 0x3a
 80003fc:	f000 ff26 	bl	800124c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000400:	203a      	movs	r0, #58	@ 0x3a
 8000402:	f000 ff3f 	bl	8001284 <HAL_NVIC_EnableIRQ>

}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800

08000414 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000418:	4a04      	ldr	r2, [pc, #16]	@ (800042c <MX_FREERTOS_Init+0x18>)
 800041a:	2100      	movs	r1, #0
 800041c:	4804      	ldr	r0, [pc, #16]	@ (8000430 <MX_FREERTOS_Init+0x1c>)
 800041e:	f003 fa8d 	bl	800393c <osThreadNew>
 8000422:	4603      	mov	r3, r0
 8000424:	4a03      	ldr	r2, [pc, #12]	@ (8000434 <MX_FREERTOS_Init+0x20>)
 8000426:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	080068d0 	.word	0x080068d0
 8000430:	08000439 	.word	0x08000439
 8000434:	200000ac 	.word	0x200000ac

08000438 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000440:	2001      	movs	r0, #1
 8000442:	f003 fb0d 	bl	8003a60 <osDelay>
 8000446:	e7fb      	b.n	8000440 <StartDefaultTask+0x8>

08000448 <MX_GPIO_Init>:
     PC11   ------> SDIO_D3
     PC12   ------> SDIO_CK
     PD2   ------> SDIO_CMD
*/
void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08c      	sub	sp, #48	@ 0x30
 800044c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 031c 	add.w	r3, r7, #28
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
 8000462:	4b63      	ldr	r3, [pc, #396]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000466:	4a62      	ldr	r2, [pc, #392]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 8000468:	f043 0310 	orr.w	r3, r3, #16
 800046c:	6313      	str	r3, [r2, #48]	@ 0x30
 800046e:	4b60      	ldr	r3, [pc, #384]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	f003 0310 	and.w	r3, r3, #16
 8000476:	61bb      	str	r3, [r7, #24]
 8000478:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	4b5c      	ldr	r3, [pc, #368]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000482:	4a5b      	ldr	r2, [pc, #364]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	6313      	str	r3, [r2, #48]	@ 0x30
 800048a:	4b59      	ldr	r3, [pc, #356]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048e:	f003 0304 	and.w	r3, r3, #4
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
 800049a:	4b55      	ldr	r3, [pc, #340]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049e:	4a54      	ldr	r2, [pc, #336]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80004a6:	4b52      	ldr	r3, [pc, #328]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	4b4e      	ldr	r3, [pc, #312]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ba:	4a4d      	ldr	r2, [pc, #308]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80004c2:	4b4b      	ldr	r3, [pc, #300]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	4b47      	ldr	r3, [pc, #284]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a46      	ldr	r2, [pc, #280]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b44      	ldr	r3, [pc, #272]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b40      	ldr	r3, [pc, #256]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a3f      	ldr	r2, [pc, #252]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004f4:	f043 0308 	orr.w	r3, r3, #8
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b3d      	ldr	r3, [pc, #244]	@ (80005f0 <MX_GPIO_Init+0x1a8>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0308 	and.w	r3, r3, #8
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	21c0      	movs	r1, #192	@ 0xc0
 800050a:	483a      	ldr	r0, [pc, #232]	@ (80005f4 <MX_GPIO_Init+0x1ac>)
 800050c:	f001 fb6a 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25Q16_CS_GPIO_Port, W25Q16_CS_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2101      	movs	r1, #1
 8000514:	4838      	ldr	r0, [pc, #224]	@ (80005f8 <MX_GPIO_Init+0x1b0>)
 8000516:	f001 fb65 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin;
 800051a:	2318      	movs	r3, #24
 800051c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	4619      	mov	r1, r3
 800052c:	4833      	ldr	r0, [pc, #204]	@ (80005fc <MX_GPIO_Init+0x1b4>)
 800052e:	f001 f9bd 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8000532:	23c0      	movs	r3, #192	@ 0xc0
 8000534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	4619      	mov	r1, r3
 8000548:	482a      	ldr	r0, [pc, #168]	@ (80005f4 <MX_GPIO_Init+0x1ac>)
 800054a:	f001 f9af 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W25Q16_CS_Pin;
 800054e:	2301      	movs	r3, #1
 8000550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(W25Q16_CS_GPIO_Port, &GPIO_InitStruct);
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	4619      	mov	r1, r3
 8000564:	4824      	ldr	r0, [pc, #144]	@ (80005f8 <MX_GPIO_Init+0x1b0>)
 8000566:	f001 f9a1 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800056a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800056e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000578:	2303      	movs	r3, #3
 800057a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800057c:	230c      	movs	r3, #12
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000580:	f107 031c 	add.w	r3, r7, #28
 8000584:	4619      	mov	r1, r3
 8000586:	481e      	ldr	r0, [pc, #120]	@ (8000600 <MX_GPIO_Init+0x1b8>)
 8000588:	f001 f990 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800058c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	2302      	movs	r3, #2
 8000594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800059e:	230a      	movs	r3, #10
 80005a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	4619      	mov	r1, r3
 80005a8:	4812      	ldr	r0, [pc, #72]	@ (80005f4 <MX_GPIO_Init+0x1ac>)
 80005aa:	f001 f97f 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005ae:	2304      	movs	r3, #4
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ba:	2303      	movs	r3, #3
 80005bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80005be:	230c      	movs	r3, #12
 80005c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	480e      	ldr	r0, [pc, #56]	@ (8000604 <MX_GPIO_Init+0x1bc>)
 80005ca:	f001 f96f 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CS_Pin|NRF_IRQ_Pin;
 80005ce:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_GPIO_Init+0x1b0>)
 80005e4:	f001 f962 	bl	80018ac <HAL_GPIO_Init>

}
 80005e8:	bf00      	nop
 80005ea:	3730      	adds	r7, #48	@ 0x30
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020000 	.word	0x40020000
 80005f8:	40020400 	.word	0x40020400
 80005fc:	40021000 	.word	0x40021000
 8000600:	40020800 	.word	0x40020800
 8000604:	40020c00 	.word	0x40020c00

08000608 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <MX_I2C2_Init+0x50>)
 800060e:	4a13      	ldr	r2, [pc, #76]	@ (800065c <MX_I2C2_Init+0x54>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <MX_I2C2_Init+0x50>)
 8000614:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <MX_I2C2_Init+0x58>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000618:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_I2C2_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_I2C2_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_I2C2_Init+0x50>)
 8000626:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <MX_I2C2_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_I2C2_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000638:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <MX_I2C2_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <MX_I2C2_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	@ (8000658 <MX_I2C2_Init+0x50>)
 8000646:	f001 fae7 	bl	8001c18 <HAL_I2C_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f8ec 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000b0 	.word	0x200000b0
 800065c:	40005800 	.word	0x40005800
 8000660:	000186a0 	.word	0x000186a0

08000664 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a19      	ldr	r2, [pc, #100]	@ (80006e8 <HAL_I2C_MspInit+0x84>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d12c      	bne.n	80006e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <HAL_I2C_MspInit+0x88>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a17      	ldr	r2, [pc, #92]	@ (80006ec <HAL_I2C_MspInit+0x88>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <HAL_I2C_MspInit+0x88>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a8:	2312      	movs	r3, #18
 80006aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006b4:	2304      	movs	r3, #4
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <HAL_I2C_MspInit+0x8c>)
 80006c0:	f001 f8f4 	bl	80018ac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <HAL_I2C_MspInit+0x88>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	4a07      	ldr	r2, [pc, #28]	@ (80006ec <HAL_I2C_MspInit+0x88>)
 80006ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d4:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <HAL_I2C_MspInit+0x88>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	@ 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40005800 	.word	0x40005800
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020400 	.word	0x40020400

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fbb2 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */
	
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f81a 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff fea2 	bl	8000448 <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f7ff fe66 	bl	80003d4 <MX_DMA_Init>
  MX_RNG_Init();
 8000708:	f000 f896 	bl	8000838 <MX_RNG_Init>
  MX_CRC_Init();
 800070c:	f7ff fe2c 	bl	8000368 <MX_CRC_Init>
  MX_TIM4_Init();
 8000710:	f000 fa46 	bl	8000ba0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8000714:	f000 f8c6 	bl	80008a4 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000718:	f7ff ff76 	bl	8000608 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800071c:	f000 fab6 	bl	8000c8c <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000720:	f7ff fd96 	bl	8000250 <MX_CAN1_Init>
	ComponentsInit(main);
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000724:	f003 f8c0 	bl	80038a8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000728:	f7ff fe74 	bl	8000414 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800072c:	f003 f8e0 	bl	80038f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <main+0x3c>

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	@ 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fe6c 	bl	8006420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b28      	ldr	r3, [pc, #160]	@ (8000800 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a27      	ldr	r2, [pc, #156]	@ (8000800 <SystemClock_Config+0xcc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <SystemClock_Config+0xd0>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a8:	23a8      	movs	r3, #168	@ 0xa8
 80007aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b0:	2307      	movs	r3, #7
 80007b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fb71 	bl	8001ea0 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c4:	f000 f832 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2105      	movs	r1, #5
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fdd2 	bl	8002390 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007f2:	f000 f81b 	bl	800082c <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	@ 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081a:	f000 fb43 	bl	8000ea4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40001c00 	.word	0x40001c00

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_RNG_Init+0x20>)
 800083e:	4a07      	ldr	r2, [pc, #28]	@ (800085c <MX_RNG_Init+0x24>)
 8000840:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_RNG_Init+0x20>)
 8000844:	f001 fff6 	bl	8002834 <HAL_RNG_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800084e:	f7ff ffed 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000104 	.word	0x20000104
 800085c:	50060800 	.word	0x50060800

08000860 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <HAL_RNG_MspInit+0x3c>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d10d      	bne.n	800088e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <HAL_RNG_MspInit+0x40>)
 8000878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087a:	4a09      	ldr	r2, [pc, #36]	@ (80008a0 <HAL_RNG_MspInit+0x40>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000880:	6353      	str	r3, [r2, #52]	@ 0x34
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <HAL_RNG_MspInit+0x40>)
 8000884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	50060800 	.word	0x50060800
 80008a0:	40023800 	.word	0x40023800

080008a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008aa:	4a18      	ldr	r2, [pc, #96]	@ (800090c <MX_SPI1_Init+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008d8:	2208      	movs	r2, #8
 80008da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ee:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008f0:	220a      	movs	r2, #10
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_SPI1_Init+0x64>)
 80008f6:	f001 ffc7 	bl	8002888 <HAL_SPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000900:	f7ff ff94 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000114 	.word	0x20000114
 800090c:	40013000 	.word	0x40013000

08000910 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a19      	ldr	r2, [pc, #100]	@ (8000994 <HAL_SPI_MspInit+0x84>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d12b      	bne.n	800098a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <HAL_SPI_MspInit+0x88>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <HAL_SPI_MspInit+0x88>)
 800093c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <HAL_SPI_MspInit+0x88>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <HAL_SPI_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a10      	ldr	r2, [pc, #64]	@ (8000998 <HAL_SPI_MspInit+0x88>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <HAL_SPI_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800096a:	2338      	movs	r3, #56	@ 0x38
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800097a:	2305      	movs	r3, #5
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <HAL_SPI_MspInit+0x8c>)
 8000986:	f000 ff91 	bl	80018ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	@ 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40013000 	.word	0x40013000
 8000998:	40023800 	.word	0x40023800
 800099c:	40020400 	.word	0x40020400

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a11      	ldr	r2, [pc, #68]	@ (80009f4 <HAL_MspInit+0x54>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_MspInit+0x54>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	f06f 0001 	mvn.w	r0, #1
 80009e6:	f000 fc31 	bl	800124c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	@ 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <HAL_InitTick+0xe4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	4a32      	ldr	r2, [pc, #200]	@ (8000adc <HAL_InitTick+0xe4>)
 8000a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a18:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <HAL_InitTick+0xe4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fece 	bl	80027d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a3e:	f001 fe9f 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8000a42:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a44:	e004      	b.n	8000a50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a46:	f001 fe9b 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a52:	4a23      	ldr	r2, [pc, #140]	@ (8000ae0 <HAL_InitTick+0xe8>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	0c9b      	lsrs	r3, r3, #18
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a60:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <HAL_InitTick+0xf0>)
 8000a62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a6a:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a70:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim13);
 8000a84:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a86:	f001 ff88 	bl	800299a <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11b      	bne.n	8000ad0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim13);
 8000a98:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a9a:	f001 ffcd 	bl	8002a38 <HAL_TIM_Base_Start_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d111      	bne.n	8000ad0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM13 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000aac:	202c      	movs	r0, #44	@ 0x2c
 8000aae:	f000 fbe9 	bl	8001284 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d808      	bhi.n	8000aca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	202c      	movs	r0, #44	@ 0x2c
 8000abe:	f000 fbc5 	bl	800124c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <HAL_InitTick+0xf4>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e002      	b.n	8000ad0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3738      	adds	r7, #56	@ 0x38
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	2000016c 	.word	0x2000016c
 8000ae8:	40001c00 	.word	0x40001c00
 8000aec:	20000004 	.word	0x20000004

08000af0 <HardFault_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
	xCAN_TxIRQ_Handler(xCAN1);
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <CAN1_TX_IRQHandler+0x18>)
 8000afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b00:	4a03      	ldr	r2, [pc, #12]	@ (8000b10 <CAN1_TX_IRQHandler+0x18>)
 8000b02:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000b04:	4a02      	ldr	r2, [pc, #8]	@ (8000b10 <CAN1_TX_IRQHandler+0x18>)
 8000b06:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8000b08:	4802      	ldr	r0, [pc, #8]	@ (8000b14 <CAN1_TX_IRQHandler+0x1c>)
 8000b0a:	4798      	blx	r3
  /* USER CODE END CAN1_TX_IRQn 0 */
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000108c 	.word	0x2000108c
 8000b14:	20001094 	.word	0x20001094

08000b18 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	xCAN_RxIRQ_Handler(xCAN1);
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <CAN1_RX0_IRQHandler+0x18>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4a03      	ldr	r2, [pc, #12]	@ (8000b30 <CAN1_RX0_IRQHandler+0x18>)
 8000b22:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000b24:	4a02      	ldr	r2, [pc, #8]	@ (8000b30 <CAN1_RX0_IRQHandler+0x18>)
 8000b26:	69d2      	ldr	r2, [r2, #28]
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <CAN1_RX0_IRQHandler+0x1c>)
 8000b2a:	4798      	blx	r3
  /* USER CODE END CAN1_RX0_IRQn 0 */
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000108c 	.word	0x2000108c
 8000b34:	20001094 	.word	0x20001094

08000b38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	xTimerIRQ_Handler(xTimer4);
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <TIM4_IRQHandler+0x18>)
 8000b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b40:	4a03      	ldr	r2, [pc, #12]	@ (8000b50 <TIM4_IRQHandler+0x18>)
 8000b42:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000b44:	4a02      	ldr	r2, [pc, #8]	@ (8000b50 <TIM4_IRQHandler+0x18>)
 8000b46:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000b48:	4802      	ldr	r0, [pc, #8]	@ (8000b54 <TIM4_IRQHandler+0x1c>)
 8000b4a:	4798      	blx	r3
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200010ec 	.word	0x200010ec
 8000b54:	2000110c 	.word	0x2000110c

08000b58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	xUSART_IRQ_Handler(xUSART1);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <USART1_IRQHandler+0x18>)
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	4a03      	ldr	r2, [pc, #12]	@ (8000b70 <USART1_IRQHandler+0x18>)
 8000b62:	6991      	ldr	r1, [r2, #24]
 8000b64:	4a02      	ldr	r2, [pc, #8]	@ (8000b70 <USART1_IRQHandler+0x18>)
 8000b66:	6952      	ldr	r2, [r2, #20]
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <USART1_IRQHandler+0x1c>)
 8000b6a:	4798      	blx	r3
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20001124 	.word	0x20001124
 8000b74:	2000112c 	.word	0x2000112c

08000b78 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000b7e:	f001 ffcb 	bl	8002b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000016c 	.word	0x2000016c

08000b8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <DMA2_Stream2_IRQHandler+0x10>)
 8000b92:	f000 fc4f 	bl	8001434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000240 	.word	0x20000240

08000ba0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_TIM4_Init+0x94>)
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000c38 <MX_TIM4_Init+0x98>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_TIM4_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_TIM4_Init+0x94>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <MX_TIM4_Init+0x94>)
 8000bd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_TIM4_Init+0x94>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_TIM4_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000be2:	4814      	ldr	r0, [pc, #80]	@ (8000c34 <MX_TIM4_Init+0x94>)
 8000be4:	f001 fed9 	bl	800299a <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000bee:	f7ff fe1d 	bl	800082c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <MX_TIM4_Init+0x94>)
 8000c00:	f002 f892 	bl	8002d28 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f7ff fe0f 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <MX_TIM4_Init+0x94>)
 8000c1c:	f002 faae 	bl	800317c <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000c26:	f7ff fe01 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001b4 	.word	0x200001b4
 8000c38:	40000800 	.word	0x40000800

08000c3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <HAL_TIM_Base_MspInit+0x48>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d115      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_TIM_Base_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	4a0c      	ldr	r2, [pc, #48]	@ (8000c88 <HAL_TIM_Base_MspInit+0x4c>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_TIM_Base_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	201e      	movs	r0, #30
 8000c70:	f000 faec 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c74:	201e      	movs	r0, #30
 8000c76:	f000 fb05 	bl	8001284 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40000800 	.word	0x40000800
 8000c88:	40023800 	.word	0x40023800

08000c8c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c90:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <MX_USART1_UART_Init+0x48>)
 8000c92:	4a11      	ldr	r2, [pc, #68]	@ (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_USART1_UART_Init+0x48>)
 8000c98:	4a10      	ldr	r2, [pc, #64]	@ (8000cdc <MX_USART1_UART_Init+0x50>)
 8000c9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <MX_USART1_UART_Init+0x48>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_USART1_UART_Init+0x48>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <MX_USART1_UART_Init+0x48>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_USART1_UART_Init+0x48>)
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <MX_USART1_UART_Init+0x48>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_USART1_UART_Init+0x48>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <MX_USART1_UART_Init+0x48>)
 8000cc2:	f002 faeb 	bl	800329c <HAL_UART_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000ccc:	f7ff fdae 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200001fc 	.word	0x200001fc
 8000cd8:	40011000 	.word	0x40011000
 8000cdc:	0007a120 	.word	0x0007a120

08000ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a35      	ldr	r2, [pc, #212]	@ (8000dd4 <HAL_UART_MspInit+0xf4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d164      	bne.n	8000dcc <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a33      	ldr	r2, [pc, #204]	@ (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d12:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <HAL_UART_MspInit+0xf8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d3a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4821      	ldr	r0, [pc, #132]	@ (8000ddc <HAL_UART_MspInit+0xfc>)
 8000d58:	f000 fda8 	bl	80018ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d5c:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d5e:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <HAL_UART_MspInit+0x104>)
 8000d60:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d68:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d84:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d90:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d92:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d98:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000da0:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000da2:	f000 fa99 	bl	80012d8 <HAL_DMA_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000dac:	f7ff fd3e 	bl	800082c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000db4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_UART_MspInit+0x100>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	2025      	movs	r0, #37	@ 0x25
 8000dc2:	f000 fa43 	bl	800124c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc6:	2025      	movs	r0, #37	@ 0x25
 8000dc8:	f000 fa5c 	bl	8001284 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	@ 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	20000240 	.word	0x20000240
 8000de4:	40026440 	.word	0x40026440

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	@ (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	@ (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	@ (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f000 f813 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f005 fb61 	bl	80064dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fc6b 	bl	80006f4 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e2c:	08006924 	.word	0x08006924
  ldr r2, =_sbss
 8000e30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e34:	200012cc 	.word	0x200012cc

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f9d4 	bl	8001236 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f7ff fdb2 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fd84 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	200002a0 	.word	0x200002a0

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200002a0 	.word	0x200002a0

08000ee4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e0ed      	b.n	80010d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff f9d8 	bl	80002b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f18:	f7ff ffd8 	bl	8000ecc <HAL_GetTick>
 8000f1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f1e:	e012      	b.n	8000f46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f20:	f7ff ffd4 	bl	8000ecc <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d90b      	bls.n	8000f46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e0c5      	b.n	80010d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0e5      	beq.n	8000f20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0202 	bic.w	r2, r2, #2
 8000f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f64:	f7ff ffb2 	bl	8000ecc <HAL_GetTick>
 8000f68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f6a:	e012      	b.n	8000f92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f6c:	f7ff ffae 	bl	8000ecc <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b0a      	cmp	r3, #10
 8000f78:	d90b      	bls.n	8000f92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2205      	movs	r2, #5
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e09f      	b.n	80010d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1e5      	bne.n	8000f6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7e1b      	ldrb	r3, [r3, #24]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d108      	bne.n	8000fba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	e007      	b.n	8000fca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7e5b      	ldrb	r3, [r3, #25]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d108      	bne.n	8000fe4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e007      	b.n	8000ff4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7e9b      	ldrb	r3, [r3, #26]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d108      	bne.n	800100e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0220 	orr.w	r2, r2, #32
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e007      	b.n	800101e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0220 	bic.w	r2, r2, #32
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7edb      	ldrb	r3, [r3, #27]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d108      	bne.n	8001038 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0210 	bic.w	r2, r2, #16
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	e007      	b.n	8001048 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0210 	orr.w	r2, r2, #16
 8001046:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7f1b      	ldrb	r3, [r3, #28]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d108      	bne.n	8001062 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0208 	orr.w	r2, r2, #8
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e007      	b.n	8001072 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0208 	bic.w	r2, r2, #8
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7f5b      	ldrb	r3, [r3, #29]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0204 	orr.w	r2, r2, #4
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e007      	b.n	800109c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0204 	bic.w	r2, r2, #4
 800109a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	ea42 0103 	orr.w	r1, r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	@ (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	@ (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	@ (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff4c 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125e:	f7ff ff61 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001262:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f7ff ffb1 	bl	80011d0 <NVIC_EncodePriority>
 800126e:	4602      	mov	r2, r0
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff80 	bl	800117c <__NVIC_SetPriority>
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff54 	bl	8001140 <__NVIC_EnableIRQ>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	795b      	ldrb	r3, [r3, #5]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff f864 	bl	8000390 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff fdf2 	bl	8000ecc <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e099      	b.n	8001428 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001314:	e00f      	b.n	8001336 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001316:	f7ff fdd9 	bl	8000ecc <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b05      	cmp	r3, #5
 8001322:	d908      	bls.n	8001336 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2220      	movs	r2, #32
 8001328:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e078      	b.n	8001428 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e8      	bne.n	8001316 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	4b38      	ldr	r3, [pc, #224]	@ (8001430 <HAL_DMA_Init+0x158>)
 8001350:	4013      	ands	r3, r2
 8001352:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001362:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4313      	orrs	r3, r2
 8001386:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	2b04      	cmp	r3, #4
 800138e:	d107      	bne.n	80013a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001398:	4313      	orrs	r3, r2
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f023 0307 	bic.w	r3, r3, #7
 80013b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	4313      	orrs	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d117      	bne.n	80013fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00e      	beq.n	80013fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f9e9 	bl	80017b4 <DMA_CheckFifoParam>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2240      	movs	r2, #64	@ 0x40
 80013ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80013f6:	2301      	movs	r3, #1
 80013f8:	e016      	b.n	8001428 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f9a0 	bl	8001748 <DMA_CalcBaseAndBitshift>
 8001408:	4603      	mov	r3, r0
 800140a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001410:	223f      	movs	r2, #63	@ 0x3f
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	f010803f 	.word	0xf010803f

08001434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001440:	4b8e      	ldr	r3, [pc, #568]	@ (800167c <HAL_DMA_IRQHandler+0x248>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a8e      	ldr	r2, [pc, #568]	@ (8001680 <HAL_DMA_IRQHandler+0x24c>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0a9b      	lsrs	r3, r3, #10
 800144c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145e:	2208      	movs	r2, #8
 8001460:	409a      	lsls	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01a      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0204 	bic.w	r2, r2, #4
 8001486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148c:	2208      	movs	r2, #8
 800148e:	409a      	lsls	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001498:	f043 0201 	orr.w	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a4:	2201      	movs	r2, #1
 80014a6:	409a      	lsls	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d012      	beq.n	80014d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c2:	2201      	movs	r2, #1
 80014c4:	409a      	lsls	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ce:	f043 0202 	orr.w	r2, r3, #2
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014da:	2204      	movs	r2, #4
 80014dc:	409a      	lsls	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d012      	beq.n	800150c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f8:	2204      	movs	r2, #4
 80014fa:	409a      	lsls	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001504:	f043 0204 	orr.w	r2, r3, #4
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001510:	2210      	movs	r2, #16
 8001512:	409a      	lsls	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d043      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d03c      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152e:	2210      	movs	r2, #16
 8001530:	409a      	lsls	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d018      	beq.n	8001576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d108      	bne.n	8001564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	2b00      	cmp	r3, #0
 8001558:	d024      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
 8001562:	e01f      	b.n	80015a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01b      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
 8001574:	e016      	b.n	80015a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d107      	bne.n	8001594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0208 	bic.w	r2, r2, #8
 8001592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a8:	2220      	movs	r2, #32
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 808f 	beq.w	80016d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8087 	beq.w	80016d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ca:	2220      	movs	r2, #32
 80015cc:	409a      	lsls	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d136      	bne.n	800164c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0216 	bic.w	r2, r2, #22
 80015ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d103      	bne.n	800160e <HAL_DMA_IRQHandler+0x1da>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0208 	bic.w	r2, r2, #8
 800161c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001622:	223f      	movs	r2, #63	@ 0x3f
 8001624:	409a      	lsls	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800163e:	2b00      	cmp	r3, #0
 8001640:	d07e      	beq.n	8001740 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
        }
        return;
 800164a:	e079      	b.n	8001740 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d01d      	beq.n	8001696 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10d      	bne.n	8001684 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166c:	2b00      	cmp	r3, #0
 800166e:	d031      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
 8001678:	e02c      	b.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
 800167a:	bf00      	nop
 800167c:	20000000 	.word	0x20000000
 8001680:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001688:	2b00      	cmp	r3, #0
 800168a:	d023      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	4798      	blx	r3
 8001694:	e01e      	b.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10f      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0210 	bic.w	r2, r2, #16
 80016b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d032      	beq.n	8001742 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d022      	beq.n	800172e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2205      	movs	r2, #5
 80016ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3301      	adds	r3, #1
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	429a      	cmp	r2, r3
 800170a:	d307      	bcc.n	800171c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f2      	bne.n	8001700 <HAL_DMA_IRQHandler+0x2cc>
 800171a:	e000      	b.n	800171e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800171c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
 800173e:	e000      	b.n	8001742 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001740:	bf00      	nop
    }
  }
}
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	3b10      	subs	r3, #16
 8001758:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <DMA_CalcBaseAndBitshift+0x64>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001762:	4a13      	ldr	r2, [pc, #76]	@ (80017b0 <DMA_CalcBaseAndBitshift+0x68>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d909      	bls.n	800178a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800177e:	f023 0303 	bic.w	r3, r3, #3
 8001782:	1d1a      	adds	r2, r3, #4
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	659a      	str	r2, [r3, #88]	@ 0x58
 8001788:	e007      	b.n	800179a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	aaaaaaab 	.word	0xaaaaaaab
 80017b0:	0800690c 	.word	0x0800690c

080017b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d11f      	bne.n	800180e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d856      	bhi.n	8001882 <DMA_CheckFifoParam+0xce>
 80017d4:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <DMA_CheckFifoParam+0x28>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017ff 	.word	0x080017ff
 80017e4:	080017ed 	.word	0x080017ed
 80017e8:	08001883 	.word	0x08001883
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d046      	beq.n	8001886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017fc:	e043      	b.n	8001886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001802:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001806:	d140      	bne.n	800188a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800180c:	e03d      	b.n	800188a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001816:	d121      	bne.n	800185c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d837      	bhi.n	800188e <DMA_CheckFifoParam+0xda>
 800181e:	a201      	add	r2, pc, #4	@ (adr r2, 8001824 <DMA_CheckFifoParam+0x70>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	0800183b 	.word	0x0800183b
 800182c:	08001835 	.word	0x08001835
 8001830:	0800184d 	.word	0x0800184d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      break;
 8001838:	e030      	b.n	800189c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d025      	beq.n	8001892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800184a:	e022      	b.n	8001892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001850:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001854:	d11f      	bne.n	8001896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800185a:	e01c      	b.n	8001896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d903      	bls.n	800186a <DMA_CheckFifoParam+0xb6>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d003      	beq.n	8001870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001868:	e018      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
      break;
 800186e:	e015      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00e      	beq.n	800189a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
      break;
 8001880:	e00b      	b.n	800189a <DMA_CheckFifoParam+0xe6>
      break;
 8001882:	bf00      	nop
 8001884:	e00a      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 8001886:	bf00      	nop
 8001888:	e008      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 800188a:	bf00      	nop
 800188c:	e006      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 800188e:	bf00      	nop
 8001890:	e004      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 8001892:	bf00      	nop
 8001894:	e002      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;   
 8001896:	bf00      	nop
 8001898:	e000      	b.n	800189c <DMA_CheckFifoParam+0xe8>
      break;
 800189a:	bf00      	nop
    }
  } 
  
  return status; 
 800189c:	7bfb      	ldrb	r3, [r7, #15]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	@ 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e16b      	b.n	8001ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 815a 	bne.w	8001b9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d130      	bne.n	8001960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80b4 	beq.w	8001b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b60      	ldr	r3, [pc, #384]	@ (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	4a5f      	ldr	r2, [pc, #380]	@ (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a42:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bbc <HAL_GPIO_Init+0x310>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	@ (8001bc0 <HAL_GPIO_Init+0x314>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02b      	beq.n	8001ad2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a51      	ldr	r2, [pc, #324]	@ (8001bc4 <HAL_GPIO_Init+0x318>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d025      	beq.n	8001ace <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a50      	ldr	r2, [pc, #320]	@ (8001bc8 <HAL_GPIO_Init+0x31c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01f      	beq.n	8001aca <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001bcc <HAL_GPIO_Init+0x320>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_GPIO_Init+0x21a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4e      	ldr	r2, [pc, #312]	@ (8001bd0 <HAL_GPIO_Init+0x324>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0x216>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001bd4 <HAL_GPIO_Init+0x328>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <HAL_GPIO_Init+0x212>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8001bd8 <HAL_GPIO_Init+0x32c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0x20e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4b      	ldr	r2, [pc, #300]	@ (8001bdc <HAL_GPIO_Init+0x330>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_GPIO_Init+0x20a>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00e      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e00c      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001aba:	2306      	movs	r3, #6
 8001abc:	e00a      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001abe:	2305      	movs	r3, #5
 8001ac0:	e008      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e004      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f002 0203 	and.w	r2, r2, #3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4093      	lsls	r3, r2
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae4:	4935      	ldr	r1, [pc, #212]	@ (8001bbc <HAL_GPIO_Init+0x310>)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af2:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <HAL_GPIO_Init+0x334>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b16:	4a32      	ldr	r2, [pc, #200]	@ (8001be0 <HAL_GPIO_Init+0x334>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b1c:	4b30      	ldr	r3, [pc, #192]	@ (8001be0 <HAL_GPIO_Init+0x334>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b40:	4a27      	ldr	r2, [pc, #156]	@ (8001be0 <HAL_GPIO_Init+0x334>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b46:	4b26      	ldr	r3, [pc, #152]	@ (8001be0 <HAL_GPIO_Init+0x334>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <HAL_GPIO_Init+0x334>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_GPIO_Init+0x334>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b94:	4a12      	ldr	r2, [pc, #72]	@ (8001be0 <HAL_GPIO_Init+0x334>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	f67f ae90 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3724      	adds	r7, #36	@ 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40021400 	.word	0x40021400
 8001bd8:	40021800 	.word	0x40021800
 8001bdc:	40021c00 	.word	0x40021c00
 8001be0:	40013c00 	.word	0x40013c00

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e12b      	b.n	8001e82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7fe fd10 	bl	8000664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2224      	movs	r2, #36	@ 0x24
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c7c:	f000 fd80 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8001c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4a81      	ldr	r2, [pc, #516]	@ (8001e8c <HAL_I2C_Init+0x274>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d807      	bhi.n	8001c9c <HAL_I2C_Init+0x84>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a80      	ldr	r2, [pc, #512]	@ (8001e90 <HAL_I2C_Init+0x278>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	bf94      	ite	ls
 8001c94:	2301      	movls	r3, #1
 8001c96:	2300      	movhi	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e006      	b.n	8001caa <HAL_I2C_Init+0x92>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e94 <HAL_I2C_Init+0x27c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	bf94      	ite	ls
 8001ca4:	2301      	movls	r3, #1
 8001ca6:	2300      	movhi	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0e7      	b.n	8001e82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a78      	ldr	r2, [pc, #480]	@ (8001e98 <HAL_I2C_Init+0x280>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0c9b      	lsrs	r3, r3, #18
 8001cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	@ (8001e8c <HAL_I2C_Init+0x274>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d802      	bhi.n	8001cec <HAL_I2C_Init+0xd4>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	e009      	b.n	8001d00 <HAL_I2C_Init+0xe8>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	4a69      	ldr	r2, [pc, #420]	@ (8001e9c <HAL_I2C_Init+0x284>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	3301      	adds	r3, #1
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d12:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	495c      	ldr	r1, [pc, #368]	@ (8001e8c <HAL_I2C_Init+0x274>)
 8001d1c:	428b      	cmp	r3, r1
 8001d1e:	d819      	bhi.n	8001d54 <HAL_I2C_Init+0x13c>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e59      	subs	r1, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2e:	1c59      	adds	r1, r3, #1
 8001d30:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d34:	400b      	ands	r3, r1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00a      	beq.n	8001d50 <HAL_I2C_Init+0x138>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1e59      	subs	r1, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	e051      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001d50:	2304      	movs	r3, #4
 8001d52:	e04f      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d111      	bne.n	8001d80 <HAL_I2C_Init+0x168>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e58      	subs	r0, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	440b      	add	r3, r1
 8001d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e012      	b.n	8001da6 <HAL_I2C_Init+0x18e>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e58      	subs	r0, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	0099      	lsls	r1, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Init+0x196>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e022      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10e      	bne.n	8001dd4 <HAL_I2C_Init+0x1bc>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e58      	subs	r0, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	440b      	add	r3, r1
 8001dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd2:	e00f      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1e58      	subs	r0, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	0099      	lsls	r1, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	6809      	ldr	r1, [r1, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6911      	ldr	r1, [r2, #16]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68d2      	ldr	r2, [r2, #12]
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	000186a0 	.word	0x000186a0
 8001e90:	001e847f 	.word	0x001e847f
 8001e94:	003d08ff 	.word	0x003d08ff
 8001e98:	431bde83 	.word	0x431bde83
 8001e9c:	10624dd3 	.word	0x10624dd3

08001ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e267      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d075      	beq.n	8001faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ebe:	4b88      	ldr	r3, [pc, #544]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eca:	4b85      	ldr	r3, [pc, #532]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d112      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed6:	4b82      	ldr	r3, [pc, #520]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ede:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	4b7e      	ldr	r3, [pc, #504]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d05b      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x108>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d157      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e242      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x74>
 8001f06:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0x98>
 8001f1e:	4b70      	ldr	r3, [pc, #448]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6f      	ldr	r2, [pc, #444]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a6c      	ldr	r2, [pc, #432]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xb0>
 8001f38:	4b69      	ldr	r3, [pc, #420]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a68      	ldr	r2, [pc, #416]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b66      	ldr	r3, [pc, #408]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a65      	ldr	r2, [pc, #404]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe ffb8 	bl	8000ecc <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7fe ffb4 	bl	8000ecc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	@ 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e207      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b5b      	ldr	r3, [pc, #364]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe ffa4 	bl	8000ecc <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f88:	f7fe ffa0 	bl	8000ecc <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	@ 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1f3      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	4b51      	ldr	r3, [pc, #324]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0xe8>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d063      	beq.n	800207e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc2:	4b47      	ldr	r3, [pc, #284]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d11c      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fce:	4b44      	ldr	r3, [pc, #272]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d116      	bne.n	8002008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e1c7      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4937      	ldr	r1, [pc, #220]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	e03a      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe ff59 	bl	8000ecc <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201e:	f7fe ff55 	bl	8000ecc <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e1a8      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	4b2b      	ldr	r3, [pc, #172]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4b28      	ldr	r3, [pc, #160]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4925      	ldr	r1, [pc, #148]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <HAL_RCC_OscConfig+0x244>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe ff38 	bl	8000ecc <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002060:	f7fe ff34 	bl	8000ecc <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e187      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d036      	beq.n	80020f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d016      	beq.n	80020c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <HAL_RCC_OscConfig+0x248>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7fe ff18 	bl	8000ecc <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a0:	f7fe ff14 	bl	8000ecc <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e167      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <HAL_RCC_OscConfig+0x240>)
 80020b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x200>
 80020be:	e01b      	b.n	80020f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c0:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_RCC_OscConfig+0x248>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7fe ff01 	bl	8000ecc <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020cc:	e00e      	b.n	80020ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ce:	f7fe fefd 	bl	8000ecc <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d907      	bls.n	80020ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e150      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	42470000 	.word	0x42470000
 80020e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b88      	ldr	r3, [pc, #544]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ea      	bne.n	80020ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8097 	beq.w	8002234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b81      	ldr	r3, [pc, #516]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b7d      	ldr	r3, [pc, #500]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	4a7c      	ldr	r2, [pc, #496]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	@ 0x40
 8002126:	4b7a      	ldr	r3, [pc, #488]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b77      	ldr	r3, [pc, #476]	@ (8002314 <HAL_RCC_OscConfig+0x474>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b74      	ldr	r3, [pc, #464]	@ (8002314 <HAL_RCC_OscConfig+0x474>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a73      	ldr	r2, [pc, #460]	@ (8002314 <HAL_RCC_OscConfig+0x474>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7fe febd 	bl	8000ecc <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7fe feb9 	bl	8000ecc <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e10c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b6a      	ldr	r3, [pc, #424]	@ (8002314 <HAL_RCC_OscConfig+0x474>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x2ea>
 800217c:	4b64      	ldr	r3, [pc, #400]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002180:	4a63      	ldr	r2, [pc, #396]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	@ 0x70
 8002188:	e01c      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x30c>
 8002192:	4b5f      	ldr	r3, [pc, #380]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002196:	4a5e      	ldr	r2, [pc, #376]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	@ 0x70
 800219e:	4b5c      	ldr	r3, [pc, #368]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0x324>
 80021ac:	4b58      	ldr	r3, [pc, #352]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b0:	4a57      	ldr	r2, [pc, #348]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b8:	4b55      	ldr	r3, [pc, #340]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021bc:	4a54      	ldr	r2, [pc, #336]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d015      	beq.n	80021f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7fe fe7e 	bl	8000ecc <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe fe7a 	bl	8000ecc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e0cb      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	4b49      	ldr	r3, [pc, #292]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ee      	beq.n	80021d4 <HAL_RCC_OscConfig+0x334>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7fe fe68 	bl	8000ecc <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002200:	f7fe fe64 	bl	8000ecc <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0b5      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	4b3e      	ldr	r3, [pc, #248]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ee      	bne.n	8002200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	4a38      	ldr	r2, [pc, #224]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a1 	beq.w	8002380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223e:	4b34      	ldr	r3, [pc, #208]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b08      	cmp	r3, #8
 8002248:	d05c      	beq.n	8002304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d141      	bne.n	80022d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002252:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <HAL_RCC_OscConfig+0x478>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fe38 	bl	8000ecc <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fe34 	bl	8000ecc <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e087      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b27      	ldr	r3, [pc, #156]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	3b01      	subs	r3, #1
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	491b      	ldr	r1, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <HAL_RCC_OscConfig+0x478>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe fe0d 	bl	8000ecc <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b6:	f7fe fe09 	bl	8000ecc <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e05c      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x416>
 80022d4:	e054      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_RCC_OscConfig+0x478>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe fdf6 	bl	8000ecc <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe fdf2 	bl	8000ecc <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e045      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_RCC_OscConfig+0x470>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x444>
 8002302:	e03d      	b.n	8002380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e038      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
 8002310:	40023800 	.word	0x40023800
 8002314:	40007000 	.word	0x40007000
 8002318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <HAL_RCC_OscConfig+0x4ec>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d028      	beq.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d121      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d11a      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002354:	4293      	cmp	r3, r2
 8002356:	d111      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d107      	bne.n	800237c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0cc      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a4:	4b68      	ldr	r3, [pc, #416]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d90c      	bls.n	80023cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b2:	4b65      	ldr	r3, [pc, #404]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b63      	ldr	r3, [pc, #396]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a58      	ldr	r2, [pc, #352]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a52      	ldr	r2, [pc, #328]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002408:	4b50      	ldr	r3, [pc, #320]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d044      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d003      	beq.n	800244e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800244a:	2b03      	cmp	r3, #3
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b3f      	ldr	r3, [pc, #252]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	4b3b      	ldr	r3, [pc, #236]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e067      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246e:	4b37      	ldr	r3, [pc, #220]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 0203 	bic.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4934      	ldr	r1, [pc, #208]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7fe fd24 	bl	8000ecc <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe fd20 	bl	8000ecc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e04f      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	4b2b      	ldr	r3, [pc, #172]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 020c 	and.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d1eb      	bne.n	8002488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d20c      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b22      	ldr	r3, [pc, #136]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	@ (8002548 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	@ (8002550 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fa5e 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023c00 	.word	0x40023c00
 800254c:	40023800 	.word	0x40023800
 8002550:	080068f4 	.word	0x080068f4
 8002554:	20000000 	.word	0x20000000
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002560:	b094      	sub	sp, #80	@ 0x50
 8002562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	647b      	str	r3, [r7, #68]	@ 0x44
 8002568:	2300      	movs	r3, #0
 800256a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800256c:	2300      	movs	r3, #0
 800256e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002574:	4b79      	ldr	r3, [pc, #484]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d00d      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x40>
 8002580:	2b08      	cmp	r3, #8
 8002582:	f200 80e1 	bhi.w	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 800258a:	2b04      	cmp	r3, #4
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x3a>
 800258e:	e0db      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b73      	ldr	r3, [pc, #460]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 8002592:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002594:	e0db      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002596:	4b73      	ldr	r3, [pc, #460]	@ (8002764 <HAL_RCC_GetSysClockFreq+0x208>)
 8002598:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800259a:	e0d8      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800259c:	4b6f      	ldr	r3, [pc, #444]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a6:	4b6d      	ldr	r3, [pc, #436]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d063      	beq.n	800267a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b6a      	ldr	r3, [pc, #424]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	2200      	movs	r2, #0
 80025ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025c6:	2300      	movs	r3, #0
 80025c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4621      	mov	r1, r4
 80025e8:	1a51      	subs	r1, r2, r1
 80025ea:	6139      	str	r1, [r7, #16]
 80025ec:	4629      	mov	r1, r5
 80025ee:	eb63 0301 	sbc.w	r3, r3, r1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002600:	4659      	mov	r1, fp
 8002602:	018b      	lsls	r3, r1, #6
 8002604:	4651      	mov	r1, sl
 8002606:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800260a:	4651      	mov	r1, sl
 800260c:	018a      	lsls	r2, r1, #6
 800260e:	4651      	mov	r1, sl
 8002610:	ebb2 0801 	subs.w	r8, r2, r1
 8002614:	4659      	mov	r1, fp
 8002616:	eb63 0901 	sbc.w	r9, r3, r1
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262e:	4690      	mov	r8, r2
 8002630:	4699      	mov	r9, r3
 8002632:	4623      	mov	r3, r4
 8002634:	eb18 0303 	adds.w	r3, r8, r3
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	462b      	mov	r3, r5
 800263c:	eb49 0303 	adc.w	r3, r9, r3
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264e:	4629      	mov	r1, r5
 8002650:	024b      	lsls	r3, r1, #9
 8002652:	4621      	mov	r1, r4
 8002654:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002658:	4621      	mov	r1, r4
 800265a:	024a      	lsls	r2, r1, #9
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002662:	2200      	movs	r2, #0
 8002664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002668:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800266c:	f7fd fd90 	bl	8000190 <__aeabi_uldivmod>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4613      	mov	r3, r2
 8002676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002678:	e058      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	4618      	mov	r0, r3
 8002684:	4611      	mov	r1, r2
 8002686:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	0159      	lsls	r1, r3, #5
 80026a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a6:	0150      	lsls	r0, r2, #5
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4641      	mov	r1, r8
 80026ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026cc:	ebb2 040a 	subs.w	r4, r2, sl
 80026d0:	eb63 050b 	sbc.w	r5, r3, fp
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	00eb      	lsls	r3, r5, #3
 80026de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e2:	00e2      	lsls	r2, r4, #3
 80026e4:	4614      	mov	r4, r2
 80026e6:	461d      	mov	r5, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	18e3      	adds	r3, r4, r3
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	464b      	mov	r3, r9
 80026f0:	eb45 0303 	adc.w	r3, r5, r3
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002702:	4629      	mov	r1, r5
 8002704:	028b      	lsls	r3, r1, #10
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270c:	4621      	mov	r1, r4
 800270e:	028a      	lsls	r2, r1, #10
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002716:	2200      	movs	r2, #0
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	61fa      	str	r2, [r7, #28]
 800271c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002720:	f7fd fd36 	bl	8000190 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_GetSysClockFreq+0x200>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c1b      	lsrs	r3, r3, #16
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800273c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800273e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_GetSysClockFreq+0x204>)
 800274a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002750:	4618      	mov	r0, r3
 8002752:	3750      	adds	r7, #80	@ 0x50
 8002754:	46bd      	mov	sp, r7
 8002756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	00f42400 	.word	0x00f42400
 8002764:	007a1200 	.word	0x007a1200

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000000 	.word	0x20000000

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08006904 	.word	0x08006904

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	08006904 	.word	0x08006904

080027d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	220f      	movs	r2, #15
 80027de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027e0:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027ec:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <HAL_RCC_GetClockConfig+0x5c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002804:	4b09      	ldr	r3, [pc, #36]	@ (800282c <HAL_RCC_GetClockConfig+0x5c>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002812:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <HAL_RCC_GetClockConfig+0x60>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0207 	and.w	r2, r3, #7
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e01c      	b.n	8002880 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	795b      	ldrb	r3, [r3, #5]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe f802 	bl	8000860 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0204 	orr.w	r2, r2, #4
 8002870:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07b      	b.n	8002992 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d108      	bne.n	80028b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028aa:	d009      	beq.n	80028c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	61da      	str	r2, [r3, #28]
 80028b2:	e005      	b.n	80028c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe f818 	bl	8000910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002944:	ea42 0103 	orr.w	r1, r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	f003 0104 	and.w	r1, r3, #4
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	f003 0210 	and.w	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	69da      	ldr	r2, [r3, #28]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e041      	b.n	8002a30 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe f93b 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f000 fa95 	bl	8002f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d001      	beq.n	8002a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e04e      	b.n	8002aee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a23      	ldr	r2, [pc, #140]	@ (8002afc <HAL_TIM_Base_Start_IT+0xc4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d022      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x80>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a7a:	d01d      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x80>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1f      	ldr	r2, [pc, #124]	@ (8002b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d018      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x80>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d013      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x80>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1c      	ldr	r2, [pc, #112]	@ (8002b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00e      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x80>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x80>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a19      	ldr	r2, [pc, #100]	@ (8002b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d004      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x80>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a18      	ldr	r2, [pc, #96]	@ (8002b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d111      	bne.n	8002adc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d010      	beq.n	8002aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ada:	e007      	b.n	8002aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40010000 	.word	0x40010000
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800
 8002b08:	40000c00 	.word	0x40000c00
 8002b0c:	40010400 	.word	0x40010400
 8002b10:	40014000 	.word	0x40014000
 8002b14:	40001800 	.word	0x40001800

08002b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d122      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d11b      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0202 	mvn.w	r2, #2
 8002b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f9b5 	bl	8002eca <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f9a7 	bl	8002eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f9b8 	bl	8002ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d122      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0204 	mvn.w	r2, #4
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f98b 	bl	8002eca <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f97d 	bl	8002eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f98e 	bl	8002ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d122      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d11b      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0208 	mvn.w	r2, #8
 8002bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f961 	bl	8002eca <HAL_TIM_IC_CaptureCallback>
 8002c08:	e005      	b.n	8002c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f953 	bl	8002eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f964 	bl	8002ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d122      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d11b      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0210 	mvn.w	r2, #16
 8002c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2208      	movs	r2, #8
 8002c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f937 	bl	8002eca <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e005      	b.n	8002c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f929 	bl	8002eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f93a 	bl	8002ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10e      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d107      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0201 	mvn.w	r2, #1
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fd fdb6 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca6:	2b80      	cmp	r3, #128	@ 0x80
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb4:	2b80      	cmp	r3, #128	@ 0x80
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fae0 	bl	8003288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd2:	2b40      	cmp	r3, #64	@ 0x40
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b40      	cmp	r3, #64	@ 0x40
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8ff 	bl	8002ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0220 	mvn.w	r2, #32
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 faaa 	bl	8003274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIM_ConfigClockSource+0x1c>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e0b4      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x186>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d7c:	d03e      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0xd4>
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d82:	f200 8087 	bhi.w	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8a:	f000 8086 	beq.w	8002e9a <HAL_TIM_ConfigClockSource+0x172>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d92:	d87f      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b70      	cmp	r3, #112	@ 0x70
 8002d96:	d01a      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0xa6>
 8002d98:	2b70      	cmp	r3, #112	@ 0x70
 8002d9a:	d87b      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b60      	cmp	r3, #96	@ 0x60
 8002d9e:	d050      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x11a>
 8002da0:	2b60      	cmp	r3, #96	@ 0x60
 8002da2:	d877      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b50      	cmp	r3, #80	@ 0x50
 8002da6:	d03c      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0xfa>
 8002da8:	2b50      	cmp	r3, #80	@ 0x50
 8002daa:	d873      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b40      	cmp	r3, #64	@ 0x40
 8002dae:	d058      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x13a>
 8002db0:	2b40      	cmp	r3, #64	@ 0x40
 8002db2:	d86f      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b30      	cmp	r3, #48	@ 0x30
 8002db6:	d064      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002db8:	2b30      	cmp	r3, #48	@ 0x30
 8002dba:	d86b      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d060      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d867      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05c      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d05a      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002dcc:	e062      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6899      	ldr	r1, [r3, #8]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f000 f9ad 	bl	800313c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	609a      	str	r2, [r3, #8]
      break;
 8002dfa:	e04f      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f000 f996 	bl	800313c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e1e:	609a      	str	r2, [r3, #8]
      break;
 8002e20:	e03c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f000 f90a 	bl	8003048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2150      	movs	r1, #80	@ 0x50
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f963 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002e40:	e02c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f000 f929 	bl	80030a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2160      	movs	r1, #96	@ 0x60
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f953 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002e60:	e01c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f000 f8ea 	bl	8003048 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2140      	movs	r1, #64	@ 0x40
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f943 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002e80:	e00c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f000 f93a 	bl	8003106 <TIM_ITRx_SetConfig>
      break;
 8002e92:	e003      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
      break;
 8002e98:	e000      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a40      	ldr	r2, [pc, #256]	@ (800301c <TIM_Base_SetConfig+0x114>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d013      	beq.n	8002f48 <TIM_Base_SetConfig+0x40>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f26:	d00f      	beq.n	8002f48 <TIM_Base_SetConfig+0x40>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003020 <TIM_Base_SetConfig+0x118>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00b      	beq.n	8002f48 <TIM_Base_SetConfig+0x40>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a3c      	ldr	r2, [pc, #240]	@ (8003024 <TIM_Base_SetConfig+0x11c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d007      	beq.n	8002f48 <TIM_Base_SetConfig+0x40>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a3b      	ldr	r2, [pc, #236]	@ (8003028 <TIM_Base_SetConfig+0x120>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_Base_SetConfig+0x40>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a3a      	ldr	r2, [pc, #232]	@ (800302c <TIM_Base_SetConfig+0x124>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d108      	bne.n	8002f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800301c <TIM_Base_SetConfig+0x114>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d02b      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f68:	d027      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003020 <TIM_Base_SetConfig+0x118>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d023      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a2b      	ldr	r2, [pc, #172]	@ (8003024 <TIM_Base_SetConfig+0x11c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d01f      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003028 <TIM_Base_SetConfig+0x120>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01b      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a29      	ldr	r2, [pc, #164]	@ (800302c <TIM_Base_SetConfig+0x124>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d017      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	@ (8003030 <TIM_Base_SetConfig+0x128>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <TIM_Base_SetConfig+0x12c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00f      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a26      	ldr	r2, [pc, #152]	@ (8003038 <TIM_Base_SetConfig+0x130>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a25      	ldr	r2, [pc, #148]	@ (800303c <TIM_Base_SetConfig+0x134>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a24      	ldr	r2, [pc, #144]	@ (8003040 <TIM_Base_SetConfig+0x138>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a23      	ldr	r2, [pc, #140]	@ (8003044 <TIM_Base_SetConfig+0x13c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d108      	bne.n	8002fcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <TIM_Base_SetConfig+0x114>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_Base_SetConfig+0xf8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800302c <TIM_Base_SetConfig+0x124>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	615a      	str	r2, [r3, #20]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40010000 	.word	0x40010000
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40000c00 	.word	0x40000c00
 800302c:	40010400 	.word	0x40010400
 8003030:	40014000 	.word	0x40014000
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800
 800303c:	40001800 	.word	0x40001800
 8003040:	40001c00 	.word	0x40001c00
 8003044:	40002000 	.word	0x40002000

08003048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f023 0201 	bic.w	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f023 030a 	bic.w	r3, r3, #10
 8003084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b087      	sub	sp, #28
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0210 	bic.w	r2, r3, #16
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	031b      	lsls	r3, r3, #12
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003106:	b480      	push	{r7}
 8003108:	b085      	sub	sp, #20
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800311c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	f043 0307 	orr.w	r3, r3, #7
 8003128:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003156:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	021a      	lsls	r2, r3, #8
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	431a      	orrs	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003190:	2302      	movs	r3, #2
 8003192:	e05a      	b.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a21      	ldr	r2, [pc, #132]	@ (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e0:	d01d      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d018      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a18      	ldr	r2, [pc, #96]	@ (8003268 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a17      	ldr	r2, [pc, #92]	@ (800326c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a15      	ldr	r2, [pc, #84]	@ (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10c      	bne.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003224:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4313      	orrs	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40010400 	.word	0x40010400
 800326c:	40014000 	.word	0x40014000
 8003270:	40001800 	.word	0x40001800

08003274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e03f      	b.n	800332e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fd0c 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	@ 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f829 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800333c:	b0c0      	sub	sp, #256	@ 0x100
 800333e:	af00      	add	r7, sp, #0
 8003340:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003354:	68d9      	ldr	r1, [r3, #12]
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	ea40 0301 	orr.w	r3, r0, r1
 8003360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	431a      	orrs	r2, r3
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003390:	f021 010c 	bic.w	r1, r1, #12
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800339e:	430b      	orrs	r3, r1
 80033a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b2:	6999      	ldr	r1, [r3, #24]
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	ea40 0301 	orr.w	r3, r0, r1
 80033be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003604 <UART_SetConfig+0x2cc>)
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d005      	beq.n	80033d8 <UART_SetConfig+0xa0>
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003608 <UART_SetConfig+0x2d0>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d104      	bne.n	80033e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7ff f9e6 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 80033dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033e0:	e003      	b.n	80033ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033e2:	f7ff f9cd 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 80033e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f4:	f040 810c 	bne.w	8003610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003402:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800340a:	4622      	mov	r2, r4
 800340c:	462b      	mov	r3, r5
 800340e:	1891      	adds	r1, r2, r2
 8003410:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003412:	415b      	adcs	r3, r3
 8003414:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800341a:	4621      	mov	r1, r4
 800341c:	eb12 0801 	adds.w	r8, r2, r1
 8003420:	4629      	mov	r1, r5
 8003422:	eb43 0901 	adc.w	r9, r3, r1
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800343a:	4690      	mov	r8, r2
 800343c:	4699      	mov	r9, r3
 800343e:	4623      	mov	r3, r4
 8003440:	eb18 0303 	adds.w	r3, r8, r3
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003448:	462b      	mov	r3, r5
 800344a:	eb49 0303 	adc.w	r3, r9, r3
 800344e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800345e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003466:	460b      	mov	r3, r1
 8003468:	18db      	adds	r3, r3, r3
 800346a:	653b      	str	r3, [r7, #80]	@ 0x50
 800346c:	4613      	mov	r3, r2
 800346e:	eb42 0303 	adc.w	r3, r2, r3
 8003472:	657b      	str	r3, [r7, #84]	@ 0x54
 8003474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800347c:	f7fc fe88 	bl	8000190 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4b61      	ldr	r3, [pc, #388]	@ (800360c <UART_SetConfig+0x2d4>)
 8003486:	fba3 2302 	umull	r2, r3, r3, r2
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	011c      	lsls	r4, r3, #4
 800348e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003498:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800349c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034a0:	4642      	mov	r2, r8
 80034a2:	464b      	mov	r3, r9
 80034a4:	1891      	adds	r1, r2, r2
 80034a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034a8:	415b      	adcs	r3, r3
 80034aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034b0:	4641      	mov	r1, r8
 80034b2:	eb12 0a01 	adds.w	sl, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb43 0b01 	adc.w	fp, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d0:	4692      	mov	sl, r2
 80034d2:	469b      	mov	fp, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	eb1a 0303 	adds.w	r3, sl, r3
 80034da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034de:	464b      	mov	r3, r9
 80034e0:	eb4b 0303 	adc.w	r3, fp, r3
 80034e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034fc:	460b      	mov	r3, r1
 80034fe:	18db      	adds	r3, r3, r3
 8003500:	643b      	str	r3, [r7, #64]	@ 0x40
 8003502:	4613      	mov	r3, r2
 8003504:	eb42 0303 	adc.w	r3, r2, r3
 8003508:	647b      	str	r3, [r7, #68]	@ 0x44
 800350a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800350e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003512:	f7fc fe3d 	bl	8000190 <__aeabi_uldivmod>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4611      	mov	r1, r2
 800351c:	4b3b      	ldr	r3, [pc, #236]	@ (800360c <UART_SetConfig+0x2d4>)
 800351e:	fba3 2301 	umull	r2, r3, r3, r1
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2264      	movs	r2, #100	@ 0x64
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	1acb      	subs	r3, r1, r3
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003532:	4b36      	ldr	r3, [pc, #216]	@ (800360c <UART_SetConfig+0x2d4>)
 8003534:	fba3 2302 	umull	r2, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003540:	441c      	add	r4, r3
 8003542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003546:	2200      	movs	r2, #0
 8003548:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800354c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	1891      	adds	r1, r2, r2
 800355a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800355c:	415b      	adcs	r3, r3
 800355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003564:	4641      	mov	r1, r8
 8003566:	1851      	adds	r1, r2, r1
 8003568:	6339      	str	r1, [r7, #48]	@ 0x30
 800356a:	4649      	mov	r1, r9
 800356c:	414b      	adcs	r3, r1
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800357c:	4659      	mov	r1, fp
 800357e:	00cb      	lsls	r3, r1, #3
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003586:	4651      	mov	r1, sl
 8003588:	00ca      	lsls	r2, r1, #3
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	4603      	mov	r3, r0
 8003590:	4642      	mov	r2, r8
 8003592:	189b      	adds	r3, r3, r2
 8003594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003598:	464b      	mov	r3, r9
 800359a:	460a      	mov	r2, r1
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035b8:	460b      	mov	r3, r1
 80035ba:	18db      	adds	r3, r3, r3
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035be:	4613      	mov	r3, r2
 80035c0:	eb42 0303 	adc.w	r3, r2, r3
 80035c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035ce:	f7fc fddf 	bl	8000190 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <UART_SetConfig+0x2d4>)
 80035d8:	fba3 1302 	umull	r1, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	2164      	movs	r1, #100	@ 0x64
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3332      	adds	r3, #50	@ 0x32
 80035ea:	4a08      	ldr	r2, [pc, #32]	@ (800360c <UART_SetConfig+0x2d4>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	f003 0207 	and.w	r2, r3, #7
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4422      	add	r2, r4
 80035fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003600:	e106      	b.n	8003810 <UART_SetConfig+0x4d8>
 8003602:	bf00      	nop
 8003604:	40011000 	.word	0x40011000
 8003608:	40011400 	.word	0x40011400
 800360c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003614:	2200      	movs	r2, #0
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800361a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800361e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003622:	4642      	mov	r2, r8
 8003624:	464b      	mov	r3, r9
 8003626:	1891      	adds	r1, r2, r2
 8003628:	6239      	str	r1, [r7, #32]
 800362a:	415b      	adcs	r3, r3
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24
 800362e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003632:	4641      	mov	r1, r8
 8003634:	1854      	adds	r4, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb43 0501 	adc.w	r5, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	00eb      	lsls	r3, r5, #3
 8003646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800364a:	00e2      	lsls	r2, r4, #3
 800364c:	4614      	mov	r4, r2
 800364e:	461d      	mov	r5, r3
 8003650:	4643      	mov	r3, r8
 8003652:	18e3      	adds	r3, r4, r3
 8003654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003658:	464b      	mov	r3, r9
 800365a:	eb45 0303 	adc.w	r3, r5, r3
 800365e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800366e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800367e:	4629      	mov	r1, r5
 8003680:	008b      	lsls	r3, r1, #2
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003688:	4621      	mov	r1, r4
 800368a:	008a      	lsls	r2, r1, #2
 800368c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003690:	f7fc fd7e 	bl	8000190 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4b60      	ldr	r3, [pc, #384]	@ (800381c <UART_SetConfig+0x4e4>)
 800369a:	fba3 2302 	umull	r2, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	011c      	lsls	r4, r3, #4
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	61b9      	str	r1, [r7, #24]
 80036bc:	415b      	adcs	r3, r3
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c4:	4641      	mov	r1, r8
 80036c6:	1851      	adds	r1, r2, r1
 80036c8:	6139      	str	r1, [r7, #16]
 80036ca:	4649      	mov	r1, r9
 80036cc:	414b      	adcs	r3, r1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036dc:	4659      	mov	r1, fp
 80036de:	00cb      	lsls	r3, r1, #3
 80036e0:	4651      	mov	r1, sl
 80036e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e6:	4651      	mov	r1, sl
 80036e8:	00ca      	lsls	r2, r1, #3
 80036ea:	4610      	mov	r0, r2
 80036ec:	4619      	mov	r1, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	4642      	mov	r2, r8
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036f8:	464b      	mov	r3, r9
 80036fa:	460a      	mov	r2, r1
 80036fc:	eb42 0303 	adc.w	r3, r2, r3
 8003700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800370e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800371c:	4649      	mov	r1, r9
 800371e:	008b      	lsls	r3, r1, #2
 8003720:	4641      	mov	r1, r8
 8003722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003726:	4641      	mov	r1, r8
 8003728:	008a      	lsls	r2, r1, #2
 800372a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800372e:	f7fc fd2f 	bl	8000190 <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4611      	mov	r1, r2
 8003738:	4b38      	ldr	r3, [pc, #224]	@ (800381c <UART_SetConfig+0x4e4>)
 800373a:	fba3 2301 	umull	r2, r3, r3, r1
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2264      	movs	r2, #100	@ 0x64
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	1acb      	subs	r3, r1, r3
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	3332      	adds	r3, #50	@ 0x32
 800374c:	4a33      	ldr	r2, [pc, #204]	@ (800381c <UART_SetConfig+0x4e4>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003758:	441c      	add	r4, r3
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	673b      	str	r3, [r7, #112]	@ 0x70
 8003762:	677a      	str	r2, [r7, #116]	@ 0x74
 8003764:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	1891      	adds	r1, r2, r2
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	415b      	adcs	r3, r3
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003778:	4641      	mov	r1, r8
 800377a:	1851      	adds	r1, r2, r1
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	4649      	mov	r1, r9
 8003780:	414b      	adcs	r3, r1
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003790:	4659      	mov	r1, fp
 8003792:	00cb      	lsls	r3, r1, #3
 8003794:	4651      	mov	r1, sl
 8003796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379a:	4651      	mov	r1, sl
 800379c:	00ca      	lsls	r2, r1, #3
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	4642      	mov	r2, r8
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037aa:	464b      	mov	r3, r9
 80037ac:	460a      	mov	r2, r1
 80037ae:	eb42 0303 	adc.w	r3, r2, r3
 80037b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80037be:	667a      	str	r2, [r7, #100]	@ 0x64
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037cc:	4649      	mov	r1, r9
 80037ce:	008b      	lsls	r3, r1, #2
 80037d0:	4641      	mov	r1, r8
 80037d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d6:	4641      	mov	r1, r8
 80037d8:	008a      	lsls	r2, r1, #2
 80037da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037de:	f7fc fcd7 	bl	8000190 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <UART_SetConfig+0x4e4>)
 80037e8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	2164      	movs	r1, #100	@ 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	3332      	adds	r3, #50	@ 0x32
 80037fa:	4a08      	ldr	r2, [pc, #32]	@ (800381c <UART_SetConfig+0x4e4>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4422      	add	r2, r4
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003816:	46bd      	mov	sp, r7
 8003818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381c:	51eb851f 	.word	0x51eb851f

08003820 <__NVIC_SetPriority>:
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	2b00      	cmp	r3, #0
 8003832:	db0a      	blt.n	800384a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	b2da      	uxtb	r2, r3
 8003838:	490c      	ldr	r1, [pc, #48]	@ (800386c <__NVIC_SetPriority+0x4c>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	440b      	add	r3, r1
 8003844:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003848:	e00a      	b.n	8003860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4908      	ldr	r1, [pc, #32]	@ (8003870 <__NVIC_SetPriority+0x50>)
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	3b04      	subs	r3, #4
 8003858:	0112      	lsls	r2, r2, #4
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	440b      	add	r3, r1
 800385e:	761a      	strb	r2, [r3, #24]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <SysTick_Handler+0x1c>)
 800387a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800387c:	f002 f988 	bl	8005b90 <xTaskGetSchedulerState>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d001      	beq.n	800388a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003886:	f000 fd9f 	bl	80043c8 <xPortSysTickHandler>
  }
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010

08003894 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003898:	2100      	movs	r1, #0
 800389a:	f06f 0004 	mvn.w	r0, #4
 800389e:	f7ff ffbf 	bl	8003820 <__NVIC_SetPriority>
#endif
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038ae:	f3ef 8305 	mrs	r3, IPSR
 80038b2:	603b      	str	r3, [r7, #0]
  return(result);
 80038b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80038ba:	f06f 0305 	mvn.w	r3, #5
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	e00c      	b.n	80038dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038c2:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <osKernelInitialize+0x44>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038ca:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <osKernelInitialize+0x44>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	e002      	b.n	80038dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
 80038da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038dc:	687b      	ldr	r3, [r7, #4]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	200002a4 	.word	0x200002a4

080038f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038f6:	f3ef 8305 	mrs	r3, IPSR
 80038fa:	603b      	str	r3, [r7, #0]
  return(result);
 80038fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003902:	f06f 0305 	mvn.w	r3, #5
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	e010      	b.n	800392c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800390a:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <osKernelStart+0x48>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d109      	bne.n	8003926 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003912:	f7ff ffbf 	bl	8003894 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003916:	4b08      	ldr	r3, [pc, #32]	@ (8003938 <osKernelStart+0x48>)
 8003918:	2202      	movs	r2, #2
 800391a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800391c:	f001 fcd4 	bl	80052c8 <vTaskStartScheduler>
      stat = osOK;
 8003920:	2300      	movs	r3, #0
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	e002      	b.n	800392c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295
 800392a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800392c:	687b      	ldr	r3, [r7, #4]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200002a4 	.word	0x200002a4

0800393c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b08e      	sub	sp, #56	@ 0x38
 8003940:	af04      	add	r7, sp, #16
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800394c:	f3ef 8305 	mrs	r3, IPSR
 8003950:	617b      	str	r3, [r7, #20]
  return(result);
 8003952:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003954:	2b00      	cmp	r3, #0
 8003956:	d17e      	bne.n	8003a56 <osThreadNew+0x11a>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d07b      	beq.n	8003a56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800395e:	2380      	movs	r3, #128	@ 0x80
 8003960:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003962:	2318      	movs	r3, #24
 8003964:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d045      	beq.n	8003a02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <osThreadNew+0x48>
        name = attr->name;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <osThreadNew+0x6e>
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b38      	cmp	r3, #56	@ 0x38
 800399c:	d805      	bhi.n	80039aa <osThreadNew+0x6e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <osThreadNew+0x72>
        return (NULL);
 80039aa:	2300      	movs	r3, #0
 80039ac:	e054      	b.n	8003a58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00e      	beq.n	80039e4 <osThreadNew+0xa8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2ba7      	cmp	r3, #167	@ 0xa7
 80039cc:	d90a      	bls.n	80039e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <osThreadNew+0xa8>
        mem = 1;
 80039de:	2301      	movs	r3, #1
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e010      	b.n	8003a06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10c      	bne.n	8003a06 <osThreadNew+0xca>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d108      	bne.n	8003a06 <osThreadNew+0xca>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <osThreadNew+0xca>
          mem = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	e001      	b.n	8003a06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d110      	bne.n	8003a2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a14:	9202      	str	r2, [sp, #8]
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6a3a      	ldr	r2, [r7, #32]
 8003a20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f001 fa5c 	bl	8004ee0 <xTaskCreateStatic>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e013      	b.n	8003a56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d110      	bne.n	8003a56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	f107 0310 	add.w	r3, r7, #16
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f001 faaa 	bl	8004fa0 <xTaskCreate>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d001      	beq.n	8003a56 <osThreadNew+0x11a>
            hTask = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a56:	693b      	ldr	r3, [r7, #16]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3728      	adds	r7, #40	@ 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a68:	f3ef 8305 	mrs	r3, IPSR
 8003a6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <osDelay+0x1c>
    stat = osErrorISR;
 8003a74:	f06f 0305 	mvn.w	r3, #5
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	e007      	b.n	8003a8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f001 fbe8 	bl	800525c <vTaskDelay>
    }
  }

  return (stat);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a07      	ldr	r2, [pc, #28]	@ (8003ac4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003aa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4a06      	ldr	r2, [pc, #24]	@ (8003ac8 <vApplicationGetIdleTaskMemory+0x30>)
 8003aae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2280      	movs	r2, #128	@ 0x80
 8003ab4:	601a      	str	r2, [r3, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	200002a8 	.word	0x200002a8
 8003ac8:	20000350 	.word	0x20000350

08003acc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a07      	ldr	r2, [pc, #28]	@ (8003af8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003adc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4a06      	ldr	r2, [pc, #24]	@ (8003afc <vApplicationGetTimerTaskMemory+0x30>)
 8003ae2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aea:	601a      	str	r2, [r3, #0]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	20000550 	.word	0x20000550
 8003afc:	200005f8 	.word	0x200005f8

08003b00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	@ 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b0c:	f001 fc4c 	bl	80053a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b10:	4b5c      	ldr	r3, [pc, #368]	@ (8003c84 <pvPortMalloc+0x184>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b18:	f000 f924 	bl	8003d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003c88 <pvPortMalloc+0x188>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 8095 	bne.w	8003c54 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01e      	beq.n	8003b6e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003b30:	2208      	movs	r2, #8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d015      	beq.n	8003b6e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f023 0307 	bic.w	r3, r3, #7
 8003b48:	3308      	adds	r3, #8
 8003b4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	e7fd      	b.n	8003b6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d06f      	beq.n	8003c54 <pvPortMalloc+0x154>
 8003b74:	4b45      	ldr	r3, [pc, #276]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d86a      	bhi.n	8003c54 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b7e:	4b44      	ldr	r3, [pc, #272]	@ (8003c90 <pvPortMalloc+0x190>)
 8003b80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b82:	4b43      	ldr	r3, [pc, #268]	@ (8003c90 <pvPortMalloc+0x190>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b88:	e004      	b.n	8003b94 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d903      	bls.n	8003ba6 <pvPortMalloc+0xa6>
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f1      	bne.n	8003b8a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ba6:	4b37      	ldr	r3, [pc, #220]	@ (8003c84 <pvPortMalloc+0x184>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d051      	beq.n	8003c54 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	4413      	add	r3, r2
 8003bb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	1ad2      	subs	r2, r2, r3
 8003bca:	2308      	movs	r3, #8
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d920      	bls.n	8003c14 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <pvPortMalloc+0xfc>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	613b      	str	r3, [r7, #16]
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	1ad2      	subs	r2, r2, r3
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c0e:	69b8      	ldr	r0, [r7, #24]
 8003c10:	f000 f90a 	bl	8003e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003c20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c22:	4b1a      	ldr	r3, [pc, #104]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <pvPortMalloc+0x194>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d203      	bcs.n	8003c36 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c2e:	4b17      	ldr	r3, [pc, #92]	@ (8003c8c <pvPortMalloc+0x18c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a18      	ldr	r2, [pc, #96]	@ (8003c94 <pvPortMalloc+0x194>)
 8003c34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	4b13      	ldr	r3, [pc, #76]	@ (8003c88 <pvPortMalloc+0x188>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c4a:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <pvPortMalloc+0x198>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	4a11      	ldr	r2, [pc, #68]	@ (8003c98 <pvPortMalloc+0x198>)
 8003c52:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c54:	f001 fbb6 	bl	80053c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <pvPortMalloc+0x17a>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60fb      	str	r3, [r7, #12]
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <pvPortMalloc+0x176>
	return pvReturn;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3728      	adds	r7, #40	@ 0x28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000a00 	.word	0x20000a00
 8003c88:	20000a14 	.word	0x20000a14
 8003c8c:	20000a04 	.word	0x20000a04
 8003c90:	200009f8 	.word	0x200009f8
 8003c94:	20000a08 	.word	0x20000a08
 8003c98:	20000a0c 	.word	0x20000a0c

08003c9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04f      	beq.n	8003d4e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003cae:	2308      	movs	r3, #8
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4b25      	ldr	r3, [pc, #148]	@ (8003d58 <vPortFree+0xbc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <vPortFree+0x46>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	60fb      	str	r3, [r7, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	e7fd      	b.n	8003cde <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <vPortFree+0x66>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	60bb      	str	r3, [r7, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	e7fd      	b.n	8003cfe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <vPortFree+0xbc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01e      	beq.n	8003d4e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11a      	bne.n	8003d4e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <vPortFree+0xbc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d28:	f001 fb3e 	bl	80053a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <vPortFree+0xc0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <vPortFree+0xc0>)
 8003d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d3a:	6938      	ldr	r0, [r7, #16]
 8003d3c:	f000 f874 	bl	8003e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <vPortFree+0xc4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3301      	adds	r3, #1
 8003d46:	4a06      	ldr	r2, [pc, #24]	@ (8003d60 <vPortFree+0xc4>)
 8003d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d4a:	f001 fb3b 	bl	80053c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000a14 	.word	0x20000a14
 8003d5c:	20000a04 	.word	0x20000a04
 8003d60:	20000a10 	.word	0x20000a10

08003d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d6a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d70:	4b27      	ldr	r3, [pc, #156]	@ (8003e10 <prvHeapInit+0xac>)
 8003d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3307      	adds	r3, #7
 8003d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0307 	bic.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	4a1f      	ldr	r2, [pc, #124]	@ (8003e10 <prvHeapInit+0xac>)
 8003d94:	4413      	add	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <prvHeapInit+0xb0>)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003da2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <prvHeapInit+0xb0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4413      	add	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003db0:	2208      	movs	r2, #8
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0307 	bic.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <prvHeapInit+0xb4>)
 8003dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003dc6:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <prvHeapInit+0xb4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dce:	4b12      	ldr	r3, [pc, #72]	@ (8003e18 <prvHeapInit+0xb4>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	1ad2      	subs	r2, r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <prvHeapInit+0xb4>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	@ (8003e1c <prvHeapInit+0xb8>)
 8003df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <prvHeapInit+0xbc>)
 8003dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003dfc:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <prvHeapInit+0xc0>)
 8003dfe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	10000000 	.word	0x10000000
 8003e14:	200009f8 	.word	0x200009f8
 8003e18:	20000a00 	.word	0x20000a00
 8003e1c:	20000a08 	.word	0x20000a08
 8003e20:	20000a04 	.word	0x20000a04
 8003e24:	20000a14 	.word	0x20000a14

08003e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e30:	4b28      	ldr	r3, [pc, #160]	@ (8003ed4 <prvInsertBlockIntoFreeList+0xac>)
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e002      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x14>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d8f7      	bhi.n	8003e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	4413      	add	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d108      	bne.n	8003e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	441a      	add	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	441a      	add	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d118      	bne.n	8003eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b15      	ldr	r3, [pc, #84]	@ (8003ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d00d      	beq.n	8003ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e008      	b.n	8003eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e003      	b.n	8003eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d002      	beq.n	8003ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	200009f8 	.word	0x200009f8
 8003ed8:	20000a00 	.word	0x20000a00

08003edc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 0208 	add.w	r2, r3, #8
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f103 0208 	add.w	r2, r3, #8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f103 0208 	add.w	r2, r3, #8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d103      	bne.n	8003f9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	e00c      	b.n	8003fb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e002      	b.n	8003fac <vListInsert+0x2e>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d2f6      	bcs.n	8003fa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	601a      	str	r2, [r3, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6892      	ldr	r2, [r2, #8]
 8004006:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6852      	ldr	r2, [r2, #4]
 8004010:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d103      	bne.n	8004024 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b04      	subs	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800405c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b04      	subs	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b04      	subs	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004074:	4a0c      	ldr	r2, [pc, #48]	@ (80040a8 <pxPortInitialiseStack+0x64>)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b14      	subs	r3, #20
 800407e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b04      	subs	r3, #4
 800408a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f06f 0202 	mvn.w	r2, #2
 8004092:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3b20      	subs	r3, #32
 8004098:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	080040ad 	.word	0x080040ad

080040ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040b6:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <prvTaskExitError+0x58>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040be:	d00b      	beq.n	80040d8 <prvTaskExitError+0x2c>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <prvTaskExitError+0x28>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	60bb      	str	r3, [r7, #8]
}
 80040ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ec:	bf00      	nop
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0fc      	beq.n	80040ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	2000000c 	.word	0x2000000c
	...

08004110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004110:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <pxCurrentTCBConst2>)
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	f380 8809 	msr	PSP, r0
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	4770      	bx	lr
 800412c:	f3af 8000 	nop.w

08004130 <pxCurrentTCBConst2>:
 8004130:	20000a60 	.word	0x20000a60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004138:	4808      	ldr	r0, [pc, #32]	@ (800415c <prvPortStartFirstTask+0x24>)
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	6800      	ldr	r0, [r0, #0]
 800413e:	f380 8808 	msr	MSP, r0
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8814 	msr	CONTROL, r0
 800414a:	b662      	cpsie	i
 800414c:	b661      	cpsie	f
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	df00      	svc	0
 8004158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800415a:	bf00      	nop
 800415c:	e000ed08 	.word	0xe000ed08

08004160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004166:	4b47      	ldr	r3, [pc, #284]	@ (8004284 <xPortStartScheduler+0x124>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a47      	ldr	r2, [pc, #284]	@ (8004288 <xPortStartScheduler+0x128>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10b      	bne.n	8004188 <xPortStartScheduler+0x28>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	60fb      	str	r3, [r7, #12]
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004188:	4b3e      	ldr	r3, [pc, #248]	@ (8004284 <xPortStartScheduler+0x124>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a3f      	ldr	r2, [pc, #252]	@ (800428c <xPortStartScheduler+0x12c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10b      	bne.n	80041aa <xPortStartScheduler+0x4a>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	613b      	str	r3, [r7, #16]
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	e7fd      	b.n	80041a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041aa:	4b39      	ldr	r3, [pc, #228]	@ (8004290 <xPortStartScheduler+0x130>)
 80041ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	22ff      	movs	r2, #255	@ 0xff
 80041ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4b31      	ldr	r3, [pc, #196]	@ (8004294 <xPortStartScheduler+0x134>)
 80041d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041d2:	4b31      	ldr	r3, [pc, #196]	@ (8004298 <xPortStartScheduler+0x138>)
 80041d4:	2207      	movs	r2, #7
 80041d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041d8:	e009      	b.n	80041ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80041da:	4b2f      	ldr	r3, [pc, #188]	@ (8004298 <xPortStartScheduler+0x138>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3b01      	subs	r3, #1
 80041e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004298 <xPortStartScheduler+0x138>)
 80041e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f6:	2b80      	cmp	r3, #128	@ 0x80
 80041f8:	d0ef      	beq.n	80041da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041fa:	4b27      	ldr	r3, [pc, #156]	@ (8004298 <xPortStartScheduler+0x138>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1c3 0307 	rsb	r3, r3, #7
 8004202:	2b04      	cmp	r3, #4
 8004204:	d00b      	beq.n	800421e <xPortStartScheduler+0xbe>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60bb      	str	r3, [r7, #8]
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	e7fd      	b.n	800421a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800421e:	4b1e      	ldr	r3, [pc, #120]	@ (8004298 <xPortStartScheduler+0x138>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	4a1c      	ldr	r2, [pc, #112]	@ (8004298 <xPortStartScheduler+0x138>)
 8004226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004228:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <xPortStartScheduler+0x138>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004230:	4a19      	ldr	r2, [pc, #100]	@ (8004298 <xPortStartScheduler+0x138>)
 8004232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	b2da      	uxtb	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800423c:	4b17      	ldr	r3, [pc, #92]	@ (800429c <xPortStartScheduler+0x13c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a16      	ldr	r2, [pc, #88]	@ (800429c <xPortStartScheduler+0x13c>)
 8004242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004248:	4b14      	ldr	r3, [pc, #80]	@ (800429c <xPortStartScheduler+0x13c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a13      	ldr	r2, [pc, #76]	@ (800429c <xPortStartScheduler+0x13c>)
 800424e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004254:	f000 f8da 	bl	800440c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004258:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <xPortStartScheduler+0x140>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800425e:	f000 f8f9 	bl	8004454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004262:	4b10      	ldr	r3, [pc, #64]	@ (80042a4 <xPortStartScheduler+0x144>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a0f      	ldr	r2, [pc, #60]	@ (80042a4 <xPortStartScheduler+0x144>)
 8004268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800426c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800426e:	f7ff ff63 	bl	8004138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004272:	f001 fa0f 	bl	8005694 <vTaskSwitchContext>
	prvTaskExitError();
 8004276:	f7ff ff19 	bl	80040ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	e000ed00 	.word	0xe000ed00
 8004288:	410fc271 	.word	0x410fc271
 800428c:	410fc270 	.word	0x410fc270
 8004290:	e000e400 	.word	0xe000e400
 8004294:	20000a18 	.word	0x20000a18
 8004298:	20000a1c 	.word	0x20000a1c
 800429c:	e000ed20 	.word	0xe000ed20
 80042a0:	2000000c 	.word	0x2000000c
 80042a4:	e000ef34 	.word	0xe000ef34

080042a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	607b      	str	r3, [r7, #4]
}
 80042c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042c2:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <vPortEnterCritical+0x5c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3301      	adds	r3, #1
 80042c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004304 <vPortEnterCritical+0x5c>)
 80042ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <vPortEnterCritical+0x5c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d110      	bne.n	80042f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <vPortEnterCritical+0x60>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	603b      	str	r3, [r7, #0]
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	e7fd      	b.n	80042f2 <vPortEnterCritical+0x4a>
	}
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2000000c 	.word	0x2000000c
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004312:	4b12      	ldr	r3, [pc, #72]	@ (800435c <vPortExitCritical+0x50>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <vPortExitCritical+0x26>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	607b      	str	r3, [r7, #4]
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	e7fd      	b.n	800432e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <vPortExitCritical+0x50>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3b01      	subs	r3, #1
 8004338:	4a08      	ldr	r2, [pc, #32]	@ (800435c <vPortExitCritical+0x50>)
 800433a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800433c:	4b07      	ldr	r3, [pc, #28]	@ (800435c <vPortExitCritical+0x50>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <vPortExitCritical+0x44>
 8004344:	2300      	movs	r3, #0
 8004346:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800434e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	2000000c 	.word	0x2000000c

08004360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004360:	f3ef 8009 	mrs	r0, PSP
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	4b15      	ldr	r3, [pc, #84]	@ (80043c0 <pxCurrentTCBConst>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	f01e 0f10 	tst.w	lr, #16
 8004370:	bf08      	it	eq
 8004372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004384:	f380 8811 	msr	BASEPRI, r0
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f001 f980 	bl	8005694 <vTaskSwitchContext>
 8004394:	f04f 0000 	mov.w	r0, #0
 8004398:	f380 8811 	msr	BASEPRI, r0
 800439c:	bc09      	pop	{r0, r3}
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	6808      	ldr	r0, [r1, #0]
 80043a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a6:	f01e 0f10 	tst.w	lr, #16
 80043aa:	bf08      	it	eq
 80043ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043b0:	f380 8809 	msr	PSP, r0
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	f3af 8000 	nop.w

080043c0 <pxCurrentTCBConst>:
 80043c0:	20000a60 	.word	0x20000a60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop

080043c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
}
 80043e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043e2:	f001 f89d 	bl	8005520 <xTaskIncrementTick>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <xPortSysTickHandler+0x40>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	2300      	movs	r3, #0
 80043f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f383 8811 	msr	BASEPRI, r3
}
 80043fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <vPortSetupTimerInterrupt+0x34>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004416:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <vPortSetupTimerInterrupt+0x38>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <vPortSetupTimerInterrupt+0x3c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0a      	ldr	r2, [pc, #40]	@ (800444c <vPortSetupTimerInterrupt+0x40>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	4a09      	ldr	r2, [pc, #36]	@ (8004450 <vPortSetupTimerInterrupt+0x44>)
 800442a:	3b01      	subs	r3, #1
 800442c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800442e:	4b04      	ldr	r3, [pc, #16]	@ (8004440 <vPortSetupTimerInterrupt+0x34>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010
 8004444:	e000e018 	.word	0xe000e018
 8004448:	20000000 	.word	0x20000000
 800444c:	10624dd3 	.word	0x10624dd3
 8004450:	e000e014 	.word	0xe000e014

08004454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004464 <vPortEnableVFP+0x10>
 8004458:	6801      	ldr	r1, [r0, #0]
 800445a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800445e:	6001      	str	r1, [r0, #0]
 8004460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004462:	bf00      	nop
 8004464:	e000ed88 	.word	0xe000ed88

08004468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800446e:	f3ef 8305 	mrs	r3, IPSR
 8004472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	d915      	bls.n	80044a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800447a:	4a18      	ldr	r2, [pc, #96]	@ (80044dc <vPortValidateInterruptPriority+0x74>)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004484:	4b16      	ldr	r3, [pc, #88]	@ (80044e0 <vPortValidateInterruptPriority+0x78>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	7afa      	ldrb	r2, [r7, #11]
 800448a:	429a      	cmp	r2, r3
 800448c:	d20b      	bcs.n	80044a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	607b      	str	r3, [r7, #4]
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	e7fd      	b.n	80044a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044a6:	4b0f      	ldr	r3, [pc, #60]	@ (80044e4 <vPortValidateInterruptPriority+0x7c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044ae:	4b0e      	ldr	r3, [pc, #56]	@ (80044e8 <vPortValidateInterruptPriority+0x80>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d90b      	bls.n	80044ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	603b      	str	r3, [r7, #0]
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	e7fd      	b.n	80044ca <vPortValidateInterruptPriority+0x62>
	}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000e3f0 	.word	0xe000e3f0
 80044e0:	20000a18 	.word	0x20000a18
 80044e4:	e000ed0c 	.word	0xe000ed0c
 80044e8:	20000a1c 	.word	0x20000a1c

080044ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <xQueueGenericReset+0x2c>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	60bb      	str	r3, [r7, #8]
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004518:	f7ff fec6 	bl	80042a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004524:	68f9      	ldr	r1, [r7, #12]
 8004526:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	441a      	add	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	3b01      	subs	r3, #1
 800454a:	68f9      	ldr	r1, [r7, #12]
 800454c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	441a      	add	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	22ff      	movs	r2, #255	@ 0xff
 800455c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	22ff      	movs	r2, #255	@ 0xff
 8004564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d114      	bne.n	8004598 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01a      	beq.n	80045ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3310      	adds	r3, #16
 800457a:	4618      	mov	r0, r3
 800457c:	f001 f942 	bl	8005804 <xTaskRemoveFromEventList>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d012      	beq.n	80045ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004586:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <xQueueGenericReset+0xd0>)
 8004588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	e009      	b.n	80045ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3310      	adds	r3, #16
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fc9d 	bl	8003edc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3324      	adds	r3, #36	@ 0x24
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fc98 	bl	8003edc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045ac:	f7ff feae 	bl	800430c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045b0:	2301      	movs	r3, #1
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08e      	sub	sp, #56	@ 0x38
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <xQueueGenericCreateStatic+0x56>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <xQueueGenericCreateStatic+0x5a>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <xQueueGenericCreateStatic+0x5c>
 800461a:	2300      	movs	r3, #0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	623b      	str	r3, [r7, #32]
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <xQueueGenericCreateStatic+0x84>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <xQueueGenericCreateStatic+0x88>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <xQueueGenericCreateStatic+0x8a>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10b      	bne.n	8004666 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	61fb      	str	r3, [r7, #28]
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	e7fd      	b.n	8004662 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004666:	2350      	movs	r3, #80	@ 0x50
 8004668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b50      	cmp	r3, #80	@ 0x50
 800466e:	d00b      	beq.n	8004688 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	61bb      	str	r3, [r7, #24]
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004688:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800468e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800469c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80046a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f805 	bl	80046ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3730      	adds	r7, #48	@ 0x30
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e002      	b.n	80046dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046e8:	2101      	movs	r1, #1
 80046ea:	69b8      	ldr	r0, [r7, #24]
 80046ec:	f7ff fefe 	bl	80044ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08e      	sub	sp, #56	@ 0x38
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800470e:	2300      	movs	r3, #0
 8004710:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <xQueueGenericSend+0x34>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <xQueueGenericSend+0x42>
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <xQueueGenericSend+0x46>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <xQueueGenericSend+0x48>
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10b      	bne.n	8004764 <xQueueGenericSend+0x64>
	__asm volatile
 800474c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d103      	bne.n	8004772 <xQueueGenericSend+0x72>
 800476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <xQueueGenericSend+0x76>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <xQueueGenericSend+0x78>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <xQueueGenericSend+0x94>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	623b      	str	r3, [r7, #32]
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004794:	f001 f9fc 	bl	8005b90 <xTaskGetSchedulerState>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <xQueueGenericSend+0xa4>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <xQueueGenericSend+0xa8>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <xQueueGenericSend+0xaa>
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10b      	bne.n	80047c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	61fb      	str	r3, [r7, #28]
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	e7fd      	b.n	80047c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047c6:	f7ff fd6f 	bl	80042a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d302      	bcc.n	80047dc <xQueueGenericSend+0xdc>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d129      	bne.n	8004830 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047e2:	f000 fa0f 	bl	8004c04 <prvCopyDataToQueue>
 80047e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d010      	beq.n	8004812 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f2:	3324      	adds	r3, #36	@ 0x24
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f805 	bl	8005804 <xTaskRemoveFromEventList>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004800:	4b3f      	ldr	r3, [pc, #252]	@ (8004900 <xQueueGenericSend+0x200>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	e00a      	b.n	8004828 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004818:	4b39      	ldr	r3, [pc, #228]	@ (8004900 <xQueueGenericSend+0x200>)
 800481a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004828:	f7ff fd70 	bl	800430c <vPortExitCritical>
				return pdPASS;
 800482c:	2301      	movs	r3, #1
 800482e:	e063      	b.n	80048f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d103      	bne.n	800483e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004836:	f7ff fd69 	bl	800430c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800483a:	2300      	movs	r3, #0
 800483c:	e05c      	b.n	80048f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800483e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004844:	f107 0314 	add.w	r3, r7, #20
 8004848:	4618      	mov	r0, r3
 800484a:	f001 f83f 	bl	80058cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800484e:	2301      	movs	r3, #1
 8004850:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004852:	f7ff fd5b 	bl	800430c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004856:	f000 fda7 	bl	80053a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800485a:	f7ff fd25 	bl	80042a8 <vPortEnterCritical>
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004864:	b25b      	sxtb	r3, r3
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d103      	bne.n	8004874 <xQueueGenericSend+0x174>
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800487a:	b25b      	sxtb	r3, r3
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d103      	bne.n	800488a <xQueueGenericSend+0x18a>
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800488a:	f7ff fd3f 	bl	800430c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800488e:	1d3a      	adds	r2, r7, #4
 8004890:	f107 0314 	add.w	r3, r7, #20
 8004894:	4611      	mov	r1, r2
 8004896:	4618      	mov	r0, r3
 8004898:	f001 f82e 	bl	80058f8 <xTaskCheckForTimeOut>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d124      	bne.n	80048ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048a4:	f000 faa6 	bl	8004df4 <prvIsQueueFull>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d018      	beq.n	80048e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b0:	3310      	adds	r3, #16
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 ff52 	bl	8005760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048be:	f000 fa31 	bl	8004d24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048c2:	f000 fd7f 	bl	80053c4 <xTaskResumeAll>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f47f af7c 	bne.w	80047c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80048ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <xQueueGenericSend+0x200>)
 80048d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	e772      	b.n	80047c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048e2:	f000 fa1f 	bl	8004d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048e6:	f000 fd6d 	bl	80053c4 <xTaskResumeAll>
 80048ea:	e76c      	b.n	80047c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048ee:	f000 fa19 	bl	8004d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048f2:	f000 fd67 	bl	80053c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3738      	adds	r7, #56	@ 0x38
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b090      	sub	sp, #64	@ 0x40
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	e7fd      	b.n	8004930 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <xQueueGenericSendFromISR+0x3e>
 800493a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <xQueueGenericSendFromISR+0x42>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <xQueueGenericSendFromISR+0x44>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d103      	bne.n	8004972 <xQueueGenericSendFromISR+0x6e>
 800496a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <xQueueGenericSendFromISR+0x72>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <xQueueGenericSendFromISR+0x74>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	623b      	str	r3, [r7, #32]
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	e7fd      	b.n	8004990 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004994:	f7ff fd68 	bl	8004468 <vPortValidateInterruptPriority>
	__asm volatile
 8004998:	f3ef 8211 	mrs	r2, BASEPRI
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	61fa      	str	r2, [r7, #28]
 80049ae:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80049b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <xQueueGenericSendFromISR+0xc2>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d12f      	bne.n	8004a26 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049dc:	f000 f912 	bl	8004c04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d112      	bne.n	8004a10 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d016      	beq.n	8004a20 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f4:	3324      	adds	r3, #36	@ 0x24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 ff04 	bl	8005804 <xTaskRemoveFromEventList>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00e      	beq.n	8004a20 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00b      	beq.n	8004a20 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e007      	b.n	8004a20 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a14:	3301      	adds	r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	b25a      	sxtb	r2, r3
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a20:	2301      	movs	r3, #1
 8004a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004a24:	e001      	b.n	8004a2a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a2c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f383 8811 	msr	BASEPRI, r3
}
 8004a34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3740      	adds	r7, #64	@ 0x40
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	@ 0x30
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <xQueueReceive+0x32>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	623b      	str	r3, [r7, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	e7fd      	b.n	8004a6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d103      	bne.n	8004a80 <xQueueReceive+0x40>
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <xQueueReceive+0x44>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <xQueueReceive+0x46>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10b      	bne.n	8004aa2 <xQueueReceive+0x62>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	61fb      	str	r3, [r7, #28]
}
 8004a9c:	bf00      	nop
 8004a9e:	bf00      	nop
 8004aa0:	e7fd      	b.n	8004a9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aa2:	f001 f875 	bl	8005b90 <xTaskGetSchedulerState>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <xQueueReceive+0x72>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <xQueueReceive+0x76>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <xQueueReceive+0x78>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <xQueueReceive+0x94>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	61bb      	str	r3, [r7, #24]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ad4:	f7ff fbe8 	bl	80042a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01f      	beq.n	8004b24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ae8:	f000 f8f6 	bl	8004cd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	1e5a      	subs	r2, r3, #1
 8004af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00f      	beq.n	8004b1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afe:	3310      	adds	r3, #16
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fe7f 	bl	8005804 <xTaskRemoveFromEventList>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b0c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c00 <xQueueReceive+0x1c0>)
 8004b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b1c:	f7ff fbf6 	bl	800430c <vPortExitCritical>
				return pdPASS;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e069      	b.n	8004bf8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d103      	bne.n	8004b32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b2a:	f7ff fbef 	bl	800430c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e062      	b.n	8004bf8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b38:	f107 0310 	add.w	r3, r7, #16
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fec5 	bl	80058cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b46:	f7ff fbe1 	bl	800430c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b4a:	f000 fc2d 	bl	80053a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b4e:	f7ff fbab 	bl	80042a8 <vPortEnterCritical>
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b58:	b25b      	sxtb	r3, r3
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d103      	bne.n	8004b68 <xQueueReceive+0x128>
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b6e:	b25b      	sxtb	r3, r3
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d103      	bne.n	8004b7e <xQueueReceive+0x13e>
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b7e:	f7ff fbc5 	bl	800430c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b82:	1d3a      	adds	r2, r7, #4
 8004b84:	f107 0310 	add.w	r3, r7, #16
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 feb4 	bl	80058f8 <xTaskCheckForTimeOut>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d123      	bne.n	8004bde <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b98:	f000 f916 	bl	8004dc8 <prvIsQueueEmpty>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d017      	beq.n	8004bd2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	3324      	adds	r3, #36	@ 0x24
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fdd8 	bl	8005760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bb2:	f000 f8b7 	bl	8004d24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bb6:	f000 fc05 	bl	80053c4 <xTaskResumeAll>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d189      	bne.n	8004ad4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c00 <xQueueReceive+0x1c0>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	e780      	b.n	8004ad4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bd4:	f000 f8a6 	bl	8004d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bd8:	f000 fbf4 	bl	80053c4 <xTaskResumeAll>
 8004bdc:	e77a      	b.n	8004ad4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004be0:	f000 f8a0 	bl	8004d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004be4:	f000 fbee 	bl	80053c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004be8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bea:	f000 f8ed 	bl	8004dc8 <prvIsQueueEmpty>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f43f af6f 	beq.w	8004ad4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bf6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3730      	adds	r7, #48	@ 0x30
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	e000ed04 	.word	0xe000ed04

08004c04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d14d      	bne.n	8004cc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 ffcc 	bl	8005bcc <xTaskPriorityDisinherit>
 8004c34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	e043      	b.n	8004cc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d119      	bne.n	8004c78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6858      	ldr	r0, [r3, #4]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	f001 fc6a 	bl	8006528 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	441a      	add	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d32b      	bcc.n	8004cc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	e026      	b.n	8004cc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68d8      	ldr	r0, [r3, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	461a      	mov	r2, r3
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	f001 fc50 	bl	8006528 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	425b      	negs	r3, r3
 8004c92:	441a      	add	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d207      	bcs.n	8004cb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	425b      	negs	r3, r3
 8004cae:	441a      	add	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d105      	bne.n	8004cc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004cce:	697b      	ldr	r3, [r7, #20]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d018      	beq.n	8004d1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	441a      	add	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d303      	bcc.n	8004d0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68d9      	ldr	r1, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	461a      	mov	r2, r3
 8004d16:	6838      	ldr	r0, [r7, #0]
 8004d18:	f001 fc06 	bl	8006528 <memcpy>
	}
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d2c:	f7ff fabc 	bl	80042a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d38:	e011      	b.n	8004d5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d012      	beq.n	8004d68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3324      	adds	r3, #36	@ 0x24
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fd5c 	bl	8005804 <xTaskRemoveFromEventList>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d52:	f000 fe35 	bl	80059c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	dce9      	bgt.n	8004d3a <prvUnlockQueue+0x16>
 8004d66:	e000      	b.n	8004d6a <prvUnlockQueue+0x46>
					break;
 8004d68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	22ff      	movs	r2, #255	@ 0xff
 8004d6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004d72:	f7ff facb 	bl	800430c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d76:	f7ff fa97 	bl	80042a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d82:	e011      	b.n	8004da8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d012      	beq.n	8004db2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3310      	adds	r3, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fd37 	bl	8005804 <xTaskRemoveFromEventList>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d9c:	f000 fe10 	bl	80059c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004da0:	7bbb      	ldrb	r3, [r7, #14]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dce9      	bgt.n	8004d84 <prvUnlockQueue+0x60>
 8004db0:	e000      	b.n	8004db4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004db2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	22ff      	movs	r2, #255	@ 0xff
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004dbc:	f7ff faa6 	bl	800430c <vPortExitCritical>
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dd0:	f7ff fa6a 	bl	80042a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e001      	b.n	8004de6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004de6:	f7ff fa91 	bl	800430c <vPortExitCritical>

	return xReturn;
 8004dea:	68fb      	ldr	r3, [r7, #12]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dfc:	f7ff fa54 	bl	80042a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d102      	bne.n	8004e12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e001      	b.n	8004e16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e16:	f7ff fa79 	bl	800430c <vPortExitCritical>

	return xReturn;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e014      	b.n	8004e5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e34:	4a0f      	ldr	r2, [pc, #60]	@ (8004e74 <vQueueAddToRegistry+0x50>)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e40:	490c      	ldr	r1, [pc, #48]	@ (8004e74 <vQueueAddToRegistry+0x50>)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e74 <vQueueAddToRegistry+0x50>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e56:	e006      	b.n	8004e66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b07      	cmp	r3, #7
 8004e62:	d9e7      	bls.n	8004e34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000a20 	.word	0x20000a20

08004e78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e88:	f7ff fa0e 	bl	80042a8 <vPortEnterCritical>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e92:	b25b      	sxtb	r3, r3
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d103      	bne.n	8004ea2 <vQueueWaitForMessageRestricted+0x2a>
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ea8:	b25b      	sxtb	r3, r3
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d103      	bne.n	8004eb8 <vQueueWaitForMessageRestricted+0x40>
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eb8:	f7ff fa28 	bl	800430c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	3324      	adds	r3, #36	@ 0x24
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fc6d 	bl	80057ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004ed2:	6978      	ldr	r0, [r7, #20]
 8004ed4:	f7ff ff26 	bl	8004d24 <prvUnlockQueue>
	}
 8004ed8:	bf00      	nop
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08e      	sub	sp, #56	@ 0x38
 8004ee4:	af04      	add	r7, sp, #16
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10b      	bne.n	8004f0c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	623b      	str	r3, [r7, #32]
}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	e7fd      	b.n	8004f08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10b      	bne.n	8004f2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	61fb      	str	r3, [r7, #28]
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	e7fd      	b.n	8004f26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f2a:	23a8      	movs	r3, #168	@ 0xa8
 8004f2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2ba8      	cmp	r3, #168	@ 0xa8
 8004f32:	d00b      	beq.n	8004f4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	61bb      	str	r3, [r7, #24]
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	e7fd      	b.n	8004f48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01e      	beq.n	8004f92 <xTaskCreateStatic+0xb2>
 8004f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01b      	beq.n	8004f92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	9303      	str	r3, [sp, #12]
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	9302      	str	r3, [sp, #8]
 8004f74:	f107 0314 	add.w	r3, r7, #20
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f851 	bl	800502c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f8c:	f000 f8f6 	bl	800517c <prvAddNewTaskToReadyList>
 8004f90:	e001      	b.n	8004f96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f96:	697b      	ldr	r3, [r7, #20]
	}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3728      	adds	r7, #40	@ 0x28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08c      	sub	sp, #48	@ 0x30
 8004fa4:	af04      	add	r7, sp, #16
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe fda3 	bl	8003b00 <pvPortMalloc>
 8004fba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00e      	beq.n	8004fe0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fc2:	20a8      	movs	r0, #168	@ 0xa8
 8004fc4:	f7fe fd9c 	bl	8003b00 <pvPortMalloc>
 8004fc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fd6:	e005      	b.n	8004fe4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fd8:	6978      	ldr	r0, [r7, #20]
 8004fda:	f7fe fe5f 	bl	8003c9c <vPortFree>
 8004fde:	e001      	b.n	8004fe4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d017      	beq.n	800501a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	9303      	str	r3, [sp, #12]
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	9302      	str	r3, [sp, #8]
 8004ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f80f 	bl	800502c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800500e:	69f8      	ldr	r0, [r7, #28]
 8005010:	f000 f8b4 	bl	800517c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005014:	2301      	movs	r3, #1
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e002      	b.n	8005020 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800501a:	f04f 33ff 	mov.w	r3, #4294967295
 800501e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005020:	69bb      	ldr	r3, [r7, #24]
	}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800503a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	461a      	mov	r2, r3
 8005044:	21a5      	movs	r1, #165	@ 0xa5
 8005046:	f001 f9eb 	bl	8006420 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005054:	3b01      	subs	r3, #1
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	f023 0307 	bic.w	r3, r3, #7
 8005062:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	617b      	str	r3, [r7, #20]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01f      	beq.n	80050cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	e012      	b.n	80050b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	7819      	ldrb	r1, [r3, #0]
 800509a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	4413      	add	r3, r2
 80050a0:	3334      	adds	r3, #52	@ 0x34
 80050a2:	460a      	mov	r2, r1
 80050a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3301      	adds	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	d9e9      	bls.n	8005092 <prvInitialiseNewTask+0x66>
 80050be:	e000      	b.n	80050c2 <prvInitialiseNewTask+0x96>
			{
				break;
 80050c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050ca:	e003      	b.n	80050d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d6:	2b37      	cmp	r3, #55	@ 0x37
 80050d8:	d901      	bls.n	80050de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050da:	2337      	movs	r3, #55	@ 0x37
 80050dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	2200      	movs	r2, #0
 80050ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	3304      	adds	r3, #4
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fe ff11 	bl	8003f1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	3318      	adds	r3, #24
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe ff0c 	bl	8003f1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005108:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005118:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	2200      	movs	r2, #0
 800511e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	2200      	movs	r2, #0
 8005126:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	3354      	adds	r3, #84	@ 0x54
 800512e:	224c      	movs	r2, #76	@ 0x4c
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f001 f974 	bl	8006420 <memset>
 8005138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513a:	4a0d      	ldr	r2, [pc, #52]	@ (8005170 <prvInitialiseNewTask+0x144>)
 800513c:	659a      	str	r2, [r3, #88]	@ 0x58
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	4a0c      	ldr	r2, [pc, #48]	@ (8005174 <prvInitialiseNewTask+0x148>)
 8005142:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005146:	4a0c      	ldr	r2, [pc, #48]	@ (8005178 <prvInitialiseNewTask+0x14c>)
 8005148:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	68f9      	ldr	r1, [r7, #12]
 800514e:	69b8      	ldr	r0, [r7, #24]
 8005150:	f7fe ff78 	bl	8004044 <pxPortInitialiseStack>
 8005154:	4602      	mov	r2, r0
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005158:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800515a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005166:	bf00      	nop
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20001190 	.word	0x20001190
 8005174:	200011f8 	.word	0x200011f8
 8005178:	20001260 	.word	0x20001260

0800517c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005184:	f7ff f890 	bl	80042a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005188:	4b2d      	ldr	r3, [pc, #180]	@ (8005240 <prvAddNewTaskToReadyList+0xc4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	4a2c      	ldr	r2, [pc, #176]	@ (8005240 <prvAddNewTaskToReadyList+0xc4>)
 8005190:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005192:	4b2c      	ldr	r3, [pc, #176]	@ (8005244 <prvAddNewTaskToReadyList+0xc8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800519a:	4a2a      	ldr	r2, [pc, #168]	@ (8005244 <prvAddNewTaskToReadyList+0xc8>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051a0:	4b27      	ldr	r3, [pc, #156]	@ (8005240 <prvAddNewTaskToReadyList+0xc4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d110      	bne.n	80051ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051a8:	f000 fc2e 	bl	8005a08 <prvInitialiseTaskLists>
 80051ac:	e00d      	b.n	80051ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051ae:	4b26      	ldr	r3, [pc, #152]	@ (8005248 <prvAddNewTaskToReadyList+0xcc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051b6:	4b23      	ldr	r3, [pc, #140]	@ (8005244 <prvAddNewTaskToReadyList+0xc8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d802      	bhi.n	80051ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005244 <prvAddNewTaskToReadyList+0xc8>)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051ca:	4b20      	ldr	r3, [pc, #128]	@ (800524c <prvAddNewTaskToReadyList+0xd0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3301      	adds	r3, #1
 80051d0:	4a1e      	ldr	r2, [pc, #120]	@ (800524c <prvAddNewTaskToReadyList+0xd0>)
 80051d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051d4:	4b1d      	ldr	r3, [pc, #116]	@ (800524c <prvAddNewTaskToReadyList+0xd0>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005250 <prvAddNewTaskToReadyList+0xd4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d903      	bls.n	80051f0 <prvAddNewTaskToReadyList+0x74>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	4a18      	ldr	r2, [pc, #96]	@ (8005250 <prvAddNewTaskToReadyList+0xd4>)
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4a15      	ldr	r2, [pc, #84]	@ (8005254 <prvAddNewTaskToReadyList+0xd8>)
 80051fe:	441a      	add	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f7fe fe95 	bl	8003f36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800520c:	f7ff f87e 	bl	800430c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005210:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <prvAddNewTaskToReadyList+0xcc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00e      	beq.n	8005236 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005218:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <prvAddNewTaskToReadyList+0xc8>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	429a      	cmp	r2, r3
 8005224:	d207      	bcs.n	8005236 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005226:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <prvAddNewTaskToReadyList+0xdc>)
 8005228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000f34 	.word	0x20000f34
 8005244:	20000a60 	.word	0x20000a60
 8005248:	20000f40 	.word	0x20000f40
 800524c:	20000f50 	.word	0x20000f50
 8005250:	20000f3c 	.word	0x20000f3c
 8005254:	20000a64 	.word	0x20000a64
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d018      	beq.n	80052a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800526e:	4b14      	ldr	r3, [pc, #80]	@ (80052c0 <vTaskDelay+0x64>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <vTaskDelay+0x32>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	60bb      	str	r3, [r7, #8]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800528e:	f000 f88b 	bl	80053a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005292:	2100      	movs	r1, #0
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fd09 	bl	8005cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800529a:	f000 f893 	bl	80053c4 <xTaskResumeAll>
 800529e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d107      	bne.n	80052b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80052a6:	4b07      	ldr	r3, [pc, #28]	@ (80052c4 <vTaskDelay+0x68>)
 80052a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000f5c 	.word	0x20000f5c
 80052c4:	e000ed04 	.word	0xe000ed04

080052c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	@ 0x28
 80052cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052d6:	463a      	mov	r2, r7
 80052d8:	1d39      	adds	r1, r7, #4
 80052da:	f107 0308 	add.w	r3, r7, #8
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fbda 	bl	8003a98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	9202      	str	r2, [sp, #8]
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	2300      	movs	r3, #0
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	2300      	movs	r3, #0
 80052f4:	460a      	mov	r2, r1
 80052f6:	4924      	ldr	r1, [pc, #144]	@ (8005388 <vTaskStartScheduler+0xc0>)
 80052f8:	4824      	ldr	r0, [pc, #144]	@ (800538c <vTaskStartScheduler+0xc4>)
 80052fa:	f7ff fdf1 	bl	8004ee0 <xTaskCreateStatic>
 80052fe:	4603      	mov	r3, r0
 8005300:	4a23      	ldr	r2, [pc, #140]	@ (8005390 <vTaskStartScheduler+0xc8>)
 8005302:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005304:	4b22      	ldr	r3, [pc, #136]	@ (8005390 <vTaskStartScheduler+0xc8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800530c:	2301      	movs	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e001      	b.n	8005316 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d102      	bne.n	8005322 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800531c:	f000 fd1a 	bl	8005d54 <xTimerCreateTimerTask>
 8005320:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d11b      	bne.n	8005360 <vTaskStartScheduler+0x98>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	613b      	str	r3, [r7, #16]
}
 800533a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800533c:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <vTaskStartScheduler+0xcc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3354      	adds	r3, #84	@ 0x54
 8005342:	4a15      	ldr	r2, [pc, #84]	@ (8005398 <vTaskStartScheduler+0xd0>)
 8005344:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005346:	4b15      	ldr	r3, [pc, #84]	@ (800539c <vTaskStartScheduler+0xd4>)
 8005348:	f04f 32ff 	mov.w	r2, #4294967295
 800534c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800534e:	4b14      	ldr	r3, [pc, #80]	@ (80053a0 <vTaskStartScheduler+0xd8>)
 8005350:	2201      	movs	r2, #1
 8005352:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005354:	4b13      	ldr	r3, [pc, #76]	@ (80053a4 <vTaskStartScheduler+0xdc>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800535a:	f7fe ff01 	bl	8004160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800535e:	e00f      	b.n	8005380 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d10b      	bne.n	8005380 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	60fb      	str	r3, [r7, #12]
}
 800537a:	bf00      	nop
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <vTaskStartScheduler+0xb4>
}
 8005380:	bf00      	nop
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	080068b8 	.word	0x080068b8
 800538c:	080059d9 	.word	0x080059d9
 8005390:	20000f58 	.word	0x20000f58
 8005394:	20000a60 	.word	0x20000a60
 8005398:	20000010 	.word	0x20000010
 800539c:	20000f54 	.word	0x20000f54
 80053a0:	20000f40 	.word	0x20000f40
 80053a4:	20000f38 	.word	0x20000f38

080053a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053ac:	4b04      	ldr	r3, [pc, #16]	@ (80053c0 <vTaskSuspendAll+0x18>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3301      	adds	r3, #1
 80053b2:	4a03      	ldr	r2, [pc, #12]	@ (80053c0 <vTaskSuspendAll+0x18>)
 80053b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053b6:	bf00      	nop
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	20000f5c 	.word	0x20000f5c

080053c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053d2:	4b42      	ldr	r3, [pc, #264]	@ (80054dc <xTaskResumeAll+0x118>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10b      	bne.n	80053f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	603b      	str	r3, [r7, #0]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053f2:	f7fe ff59 	bl	80042a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053f6:	4b39      	ldr	r3, [pc, #228]	@ (80054dc <xTaskResumeAll+0x118>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	4a37      	ldr	r2, [pc, #220]	@ (80054dc <xTaskResumeAll+0x118>)
 80053fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005400:	4b36      	ldr	r3, [pc, #216]	@ (80054dc <xTaskResumeAll+0x118>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d162      	bne.n	80054ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005408:	4b35      	ldr	r3, [pc, #212]	@ (80054e0 <xTaskResumeAll+0x11c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d05e      	beq.n	80054ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005410:	e02f      	b.n	8005472 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005412:	4b34      	ldr	r3, [pc, #208]	@ (80054e4 <xTaskResumeAll+0x120>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3318      	adds	r3, #24
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fde6 	bl	8003ff0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3304      	adds	r3, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe fde1 	bl	8003ff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005432:	4b2d      	ldr	r3, [pc, #180]	@ (80054e8 <xTaskResumeAll+0x124>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d903      	bls.n	8005442 <xTaskResumeAll+0x7e>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	4a2a      	ldr	r2, [pc, #168]	@ (80054e8 <xTaskResumeAll+0x124>)
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4a27      	ldr	r2, [pc, #156]	@ (80054ec <xTaskResumeAll+0x128>)
 8005450:	441a      	add	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3304      	adds	r3, #4
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f7fe fd6c 	bl	8003f36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005462:	4b23      	ldr	r3, [pc, #140]	@ (80054f0 <xTaskResumeAll+0x12c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800546c:	4b21      	ldr	r3, [pc, #132]	@ (80054f4 <xTaskResumeAll+0x130>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005472:	4b1c      	ldr	r3, [pc, #112]	@ (80054e4 <xTaskResumeAll+0x120>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1cb      	bne.n	8005412 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005480:	f000 fb66 	bl	8005b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005484:	4b1c      	ldr	r3, [pc, #112]	@ (80054f8 <xTaskResumeAll+0x134>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005490:	f000 f846 	bl	8005520 <xTaskIncrementTick>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800549a:	4b16      	ldr	r3, [pc, #88]	@ (80054f4 <xTaskResumeAll+0x130>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f1      	bne.n	8005490 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80054ac:	4b12      	ldr	r3, [pc, #72]	@ (80054f8 <xTaskResumeAll+0x134>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054b2:	4b10      	ldr	r3, [pc, #64]	@ (80054f4 <xTaskResumeAll+0x130>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054be:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <xTaskResumeAll+0x138>)
 80054c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054ce:	f7fe ff1d 	bl	800430c <vPortExitCritical>

	return xAlreadyYielded;
 80054d2:	68bb      	ldr	r3, [r7, #8]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000f5c 	.word	0x20000f5c
 80054e0:	20000f34 	.word	0x20000f34
 80054e4:	20000ef4 	.word	0x20000ef4
 80054e8:	20000f3c 	.word	0x20000f3c
 80054ec:	20000a64 	.word	0x20000a64
 80054f0:	20000a60 	.word	0x20000a60
 80054f4:	20000f48 	.word	0x20000f48
 80054f8:	20000f44 	.word	0x20000f44
 80054fc:	e000ed04 	.word	0xe000ed04

08005500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005506:	4b05      	ldr	r3, [pc, #20]	@ (800551c <xTaskGetTickCount+0x1c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800550c:	687b      	ldr	r3, [r7, #4]
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000f38 	.word	0x20000f38

08005520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800552a:	4b4f      	ldr	r3, [pc, #316]	@ (8005668 <xTaskIncrementTick+0x148>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f040 8090 	bne.w	8005654 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005534:	4b4d      	ldr	r3, [pc, #308]	@ (800566c <xTaskIncrementTick+0x14c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800553c:	4a4b      	ldr	r2, [pc, #300]	@ (800566c <xTaskIncrementTick+0x14c>)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d121      	bne.n	800558c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005548:	4b49      	ldr	r3, [pc, #292]	@ (8005670 <xTaskIncrementTick+0x150>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00b      	beq.n	800556a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	603b      	str	r3, [r7, #0]
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	e7fd      	b.n	8005566 <xTaskIncrementTick+0x46>
 800556a:	4b41      	ldr	r3, [pc, #260]	@ (8005670 <xTaskIncrementTick+0x150>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	4b40      	ldr	r3, [pc, #256]	@ (8005674 <xTaskIncrementTick+0x154>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a3e      	ldr	r2, [pc, #248]	@ (8005670 <xTaskIncrementTick+0x150>)
 8005576:	6013      	str	r3, [r2, #0]
 8005578:	4a3e      	ldr	r2, [pc, #248]	@ (8005674 <xTaskIncrementTick+0x154>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	4b3e      	ldr	r3, [pc, #248]	@ (8005678 <xTaskIncrementTick+0x158>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a3c      	ldr	r2, [pc, #240]	@ (8005678 <xTaskIncrementTick+0x158>)
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	f000 fae2 	bl	8005b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800558c:	4b3b      	ldr	r3, [pc, #236]	@ (800567c <xTaskIncrementTick+0x15c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	429a      	cmp	r2, r3
 8005594:	d349      	bcc.n	800562a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005596:	4b36      	ldr	r3, [pc, #216]	@ (8005670 <xTaskIncrementTick+0x150>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a0:	4b36      	ldr	r3, [pc, #216]	@ (800567c <xTaskIncrementTick+0x15c>)
 80055a2:	f04f 32ff 	mov.w	r2, #4294967295
 80055a6:	601a      	str	r2, [r3, #0]
					break;
 80055a8:	e03f      	b.n	800562a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055aa:	4b31      	ldr	r3, [pc, #196]	@ (8005670 <xTaskIncrementTick+0x150>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d203      	bcs.n	80055ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055c2:	4a2e      	ldr	r2, [pc, #184]	@ (800567c <xTaskIncrementTick+0x15c>)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055c8:	e02f      	b.n	800562a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3304      	adds	r3, #4
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe fd0e 	bl	8003ff0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	3318      	adds	r3, #24
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fe fd05 	bl	8003ff0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ea:	4b25      	ldr	r3, [pc, #148]	@ (8005680 <xTaskIncrementTick+0x160>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d903      	bls.n	80055fa <xTaskIncrementTick+0xda>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	4a22      	ldr	r2, [pc, #136]	@ (8005680 <xTaskIncrementTick+0x160>)
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4a1f      	ldr	r2, [pc, #124]	@ (8005684 <xTaskIncrementTick+0x164>)
 8005608:	441a      	add	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	3304      	adds	r3, #4
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7fe fc90 	bl	8003f36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561a:	4b1b      	ldr	r3, [pc, #108]	@ (8005688 <xTaskIncrementTick+0x168>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005620:	429a      	cmp	r2, r3
 8005622:	d3b8      	bcc.n	8005596 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005624:	2301      	movs	r3, #1
 8005626:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005628:	e7b5      	b.n	8005596 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800562a:	4b17      	ldr	r3, [pc, #92]	@ (8005688 <xTaskIncrementTick+0x168>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005630:	4914      	ldr	r1, [pc, #80]	@ (8005684 <xTaskIncrementTick+0x164>)
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d901      	bls.n	8005646 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005646:	4b11      	ldr	r3, [pc, #68]	@ (800568c <xTaskIncrementTick+0x16c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800564e:	2301      	movs	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e004      	b.n	800565e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005654:	4b0e      	ldr	r3, [pc, #56]	@ (8005690 <xTaskIncrementTick+0x170>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	4a0d      	ldr	r2, [pc, #52]	@ (8005690 <xTaskIncrementTick+0x170>)
 800565c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800565e:	697b      	ldr	r3, [r7, #20]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20000f5c 	.word	0x20000f5c
 800566c:	20000f38 	.word	0x20000f38
 8005670:	20000eec 	.word	0x20000eec
 8005674:	20000ef0 	.word	0x20000ef0
 8005678:	20000f4c 	.word	0x20000f4c
 800567c:	20000f54 	.word	0x20000f54
 8005680:	20000f3c 	.word	0x20000f3c
 8005684:	20000a64 	.word	0x20000a64
 8005688:	20000a60 	.word	0x20000a60
 800568c:	20000f48 	.word	0x20000f48
 8005690:	20000f44 	.word	0x20000f44

08005694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800569a:	4b2b      	ldr	r3, [pc, #172]	@ (8005748 <vTaskSwitchContext+0xb4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056a2:	4b2a      	ldr	r3, [pc, #168]	@ (800574c <vTaskSwitchContext+0xb8>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056a8:	e047      	b.n	800573a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80056aa:	4b28      	ldr	r3, [pc, #160]	@ (800574c <vTaskSwitchContext+0xb8>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b0:	4b27      	ldr	r3, [pc, #156]	@ (8005750 <vTaskSwitchContext+0xbc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	e011      	b.n	80056dc <vTaskSwitchContext+0x48>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	607b      	str	r3, [r7, #4]
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <vTaskSwitchContext+0x3e>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b01      	subs	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	491d      	ldr	r1, [pc, #116]	@ (8005754 <vTaskSwitchContext+0xc0>)
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0e3      	beq.n	80056b8 <vTaskSwitchContext+0x24>
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4a16      	ldr	r2, [pc, #88]	@ (8005754 <vTaskSwitchContext+0xc0>)
 80056fc:	4413      	add	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3308      	adds	r3, #8
 8005712:	429a      	cmp	r2, r3
 8005714:	d104      	bne.n	8005720 <vTaskSwitchContext+0x8c>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	4a0c      	ldr	r2, [pc, #48]	@ (8005758 <vTaskSwitchContext+0xc4>)
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	4a09      	ldr	r2, [pc, #36]	@ (8005750 <vTaskSwitchContext+0xbc>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005730:	4b09      	ldr	r3, [pc, #36]	@ (8005758 <vTaskSwitchContext+0xc4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3354      	adds	r3, #84	@ 0x54
 8005736:	4a09      	ldr	r2, [pc, #36]	@ (800575c <vTaskSwitchContext+0xc8>)
 8005738:	6013      	str	r3, [r2, #0]
}
 800573a:	bf00      	nop
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000f5c 	.word	0x20000f5c
 800574c:	20000f48 	.word	0x20000f48
 8005750:	20000f3c 	.word	0x20000f3c
 8005754:	20000a64 	.word	0x20000a64
 8005758:	20000a60 	.word	0x20000a60
 800575c:	20000010 	.word	0x20000010

08005760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	60fb      	str	r3, [r7, #12]
}
 8005782:	bf00      	nop
 8005784:	bf00      	nop
 8005786:	e7fd      	b.n	8005784 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005788:	4b07      	ldr	r3, [pc, #28]	@ (80057a8 <vTaskPlaceOnEventList+0x48>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3318      	adds	r3, #24
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fe fbf4 	bl	8003f7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005796:	2101      	movs	r1, #1
 8005798:	6838      	ldr	r0, [r7, #0]
 800579a:	f000 fa87 	bl	8005cac <prvAddCurrentTaskToDelayedList>
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000a60 	.word	0x20000a60

080057ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10b      	bne.n	80057d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	617b      	str	r3, [r7, #20]
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	e7fd      	b.n	80057d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005800 <vTaskPlaceOnEventListRestricted+0x54>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3318      	adds	r3, #24
 80057dc:	4619      	mov	r1, r3
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7fe fba9 	bl	8003f36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
 80057ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	68b8      	ldr	r0, [r7, #8]
 80057f4:	f000 fa5a 	bl	8005cac <prvAddCurrentTaskToDelayedList>
	}
 80057f8:	bf00      	nop
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000a60 	.word	0x20000a60

08005804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800581a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	60fb      	str	r3, [r7, #12]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3318      	adds	r3, #24
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe fbda 	bl	8003ff0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800583c:	4b1d      	ldr	r3, [pc, #116]	@ (80058b4 <xTaskRemoveFromEventList+0xb0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d11d      	bne.n	8005880 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	3304      	adds	r3, #4
 8005848:	4618      	mov	r0, r3
 800584a:	f7fe fbd1 	bl	8003ff0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005852:	4b19      	ldr	r3, [pc, #100]	@ (80058b8 <xTaskRemoveFromEventList+0xb4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d903      	bls.n	8005862 <xTaskRemoveFromEventList+0x5e>
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585e:	4a16      	ldr	r2, [pc, #88]	@ (80058b8 <xTaskRemoveFromEventList+0xb4>)
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4a13      	ldr	r2, [pc, #76]	@ (80058bc <xTaskRemoveFromEventList+0xb8>)
 8005870:	441a      	add	r2, r3
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	3304      	adds	r3, #4
 8005876:	4619      	mov	r1, r3
 8005878:	4610      	mov	r0, r2
 800587a:	f7fe fb5c 	bl	8003f36 <vListInsertEnd>
 800587e:	e005      	b.n	800588c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	3318      	adds	r3, #24
 8005884:	4619      	mov	r1, r3
 8005886:	480e      	ldr	r0, [pc, #56]	@ (80058c0 <xTaskRemoveFromEventList+0xbc>)
 8005888:	f7fe fb55 	bl	8003f36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005890:	4b0c      	ldr	r3, [pc, #48]	@ (80058c4 <xTaskRemoveFromEventList+0xc0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	429a      	cmp	r2, r3
 8005898:	d905      	bls.n	80058a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800589a:	2301      	movs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800589e:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <xTaskRemoveFromEventList+0xc4>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	e001      	b.n	80058aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058aa:	697b      	ldr	r3, [r7, #20]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000f5c 	.word	0x20000f5c
 80058b8:	20000f3c 	.word	0x20000f3c
 80058bc:	20000a64 	.word	0x20000a64
 80058c0:	20000ef4 	.word	0x20000ef4
 80058c4:	20000a60 	.word	0x20000a60
 80058c8:	20000f48 	.word	0x20000f48

080058cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <vTaskInternalSetTimeOutState+0x24>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058dc:	4b05      	ldr	r3, [pc, #20]	@ (80058f4 <vTaskInternalSetTimeOutState+0x28>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	605a      	str	r2, [r3, #4]
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	20000f4c 	.word	0x20000f4c
 80058f4:	20000f38 	.word	0x20000f38

080058f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10b      	bne.n	8005920 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	613b      	str	r3, [r7, #16]
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	e7fd      	b.n	800591c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60fb      	str	r3, [r7, #12]
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	e7fd      	b.n	800593a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800593e:	f7fe fcb3 	bl	80042a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005942:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <xTaskCheckForTimeOut+0xc0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d102      	bne.n	8005962 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800595c:	2300      	movs	r3, #0
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	e023      	b.n	80059aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b15      	ldr	r3, [pc, #84]	@ (80059bc <xTaskCheckForTimeOut+0xc4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d007      	beq.n	800597e <xTaskCheckForTimeOut+0x86>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	d302      	bcc.n	800597e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	61fb      	str	r3, [r7, #28]
 800597c:	e015      	b.n	80059aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	429a      	cmp	r2, r3
 8005986:	d20b      	bcs.n	80059a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	1ad2      	subs	r2, r2, r3
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff99 	bl	80058cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	e004      	b.n	80059aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059a6:	2301      	movs	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059aa:	f7fe fcaf 	bl	800430c <vPortExitCritical>

	return xReturn;
 80059ae:	69fb      	ldr	r3, [r7, #28]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000f38 	.word	0x20000f38
 80059bc:	20000f4c 	.word	0x20000f4c

080059c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059c4:	4b03      	ldr	r3, [pc, #12]	@ (80059d4 <vTaskMissedYield+0x14>)
 80059c6:	2201      	movs	r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
}
 80059ca:	bf00      	nop
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	20000f48 	.word	0x20000f48

080059d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059e0:	f000 f852 	bl	8005a88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059e4:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <prvIdleTask+0x28>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d9f9      	bls.n	80059e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059ec:	4b05      	ldr	r3, [pc, #20]	@ (8005a04 <prvIdleTask+0x2c>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059fc:	e7f0      	b.n	80059e0 <prvIdleTask+0x8>
 80059fe:	bf00      	nop
 8005a00:	20000a64 	.word	0x20000a64
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a0e:	2300      	movs	r3, #0
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	e00c      	b.n	8005a2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4a12      	ldr	r2, [pc, #72]	@ (8005a68 <prvInitialiseTaskLists+0x60>)
 8005a20:	4413      	add	r3, r2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe fa5a 	bl	8003edc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b37      	cmp	r3, #55	@ 0x37
 8005a32:	d9ef      	bls.n	8005a14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a34:	480d      	ldr	r0, [pc, #52]	@ (8005a6c <prvInitialiseTaskLists+0x64>)
 8005a36:	f7fe fa51 	bl	8003edc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a3a:	480d      	ldr	r0, [pc, #52]	@ (8005a70 <prvInitialiseTaskLists+0x68>)
 8005a3c:	f7fe fa4e 	bl	8003edc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a40:	480c      	ldr	r0, [pc, #48]	@ (8005a74 <prvInitialiseTaskLists+0x6c>)
 8005a42:	f7fe fa4b 	bl	8003edc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a46:	480c      	ldr	r0, [pc, #48]	@ (8005a78 <prvInitialiseTaskLists+0x70>)
 8005a48:	f7fe fa48 	bl	8003edc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a4c:	480b      	ldr	r0, [pc, #44]	@ (8005a7c <prvInitialiseTaskLists+0x74>)
 8005a4e:	f7fe fa45 	bl	8003edc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a52:	4b0b      	ldr	r3, [pc, #44]	@ (8005a80 <prvInitialiseTaskLists+0x78>)
 8005a54:	4a05      	ldr	r2, [pc, #20]	@ (8005a6c <prvInitialiseTaskLists+0x64>)
 8005a56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a58:	4b0a      	ldr	r3, [pc, #40]	@ (8005a84 <prvInitialiseTaskLists+0x7c>)
 8005a5a:	4a05      	ldr	r2, [pc, #20]	@ (8005a70 <prvInitialiseTaskLists+0x68>)
 8005a5c:	601a      	str	r2, [r3, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000a64 	.word	0x20000a64
 8005a6c:	20000ec4 	.word	0x20000ec4
 8005a70:	20000ed8 	.word	0x20000ed8
 8005a74:	20000ef4 	.word	0x20000ef4
 8005a78:	20000f08 	.word	0x20000f08
 8005a7c:	20000f20 	.word	0x20000f20
 8005a80:	20000eec 	.word	0x20000eec
 8005a84:	20000ef0 	.word	0x20000ef0

08005a88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a8e:	e019      	b.n	8005ac4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a90:	f7fe fc0a 	bl	80042a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a94:	4b10      	ldr	r3, [pc, #64]	@ (8005ad8 <prvCheckTasksWaitingTermination+0x50>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe faa5 	bl	8003ff0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a0b      	ldr	r2, [pc, #44]	@ (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005aae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae0 <prvCheckTasksWaitingTermination+0x58>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae0 <prvCheckTasksWaitingTermination+0x58>)
 8005ab8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005aba:	f7fe fc27 	bl	800430c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f810 	bl	8005ae4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ac4:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <prvCheckTasksWaitingTermination+0x58>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e1      	bne.n	8005a90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000f08 	.word	0x20000f08
 8005adc:	20000f34 	.word	0x20000f34
 8005ae0:	20000f1c 	.word	0x20000f1c

08005ae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3354      	adds	r3, #84	@ 0x54
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fc9d 	bl	8006430 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe f8c9 	bl	8003c9c <vPortFree>
				vPortFree( pxTCB );
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fe f8c6 	bl	8003c9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b10:	e019      	b.n	8005b46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d103      	bne.n	8005b24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fe f8bd 	bl	8003c9c <vPortFree>
	}
 8005b22:	e010      	b.n	8005b46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d00b      	beq.n	8005b46 <prvDeleteTCB+0x62>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	60fb      	str	r3, [r7, #12]
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	e7fd      	b.n	8005b42 <prvDeleteTCB+0x5e>
	}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b56:	4b0c      	ldr	r3, [pc, #48]	@ (8005b88 <prvResetNextTaskUnblockTime+0x38>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b60:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <prvResetNextTaskUnblockTime+0x3c>)
 8005b62:	f04f 32ff 	mov.w	r2, #4294967295
 8005b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b68:	e008      	b.n	8005b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b6a:	4b07      	ldr	r3, [pc, #28]	@ (8005b88 <prvResetNextTaskUnblockTime+0x38>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4a04      	ldr	r2, [pc, #16]	@ (8005b8c <prvResetNextTaskUnblockTime+0x3c>)
 8005b7a:	6013      	str	r3, [r2, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	20000eec 	.word	0x20000eec
 8005b8c:	20000f54 	.word	0x20000f54

08005b90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b96:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <xTaskGetSchedulerState+0x34>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	e008      	b.n	8005bb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba4:	4b08      	ldr	r3, [pc, #32]	@ (8005bc8 <xTaskGetSchedulerState+0x38>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bac:	2302      	movs	r3, #2
 8005bae:	607b      	str	r3, [r7, #4]
 8005bb0:	e001      	b.n	8005bb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bb6:	687b      	ldr	r3, [r7, #4]
	}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20000f40 	.word	0x20000f40
 8005bc8:	20000f5c 	.word	0x20000f5c

08005bcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d058      	beq.n	8005c94 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005be2:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca0 <xTaskPriorityDisinherit+0xd4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d00b      	beq.n	8005c04 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60fb      	str	r3, [r7, #12]
}
 8005bfe:	bf00      	nop
 8005c00:	bf00      	nop
 8005c02:	e7fd      	b.n	8005c00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60bb      	str	r3, [r7, #8]
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c28:	1e5a      	subs	r2, r3, #1
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d02c      	beq.n	8005c94 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d128      	bne.n	8005c94 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	3304      	adds	r3, #4
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe f9d2 	bl	8003ff0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca4 <xTaskPriorityDisinherit+0xd8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d903      	bls.n	8005c74 <xTaskPriorityDisinherit+0xa8>
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca4 <xTaskPriorityDisinherit+0xd8>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <xTaskPriorityDisinherit+0xdc>)
 8005c82:	441a      	add	r2, r3
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7fe f953 	bl	8003f36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c94:	697b      	ldr	r3, [r7, #20]
	}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000a60 	.word	0x20000a60
 8005ca4:	20000f3c 	.word	0x20000f3c
 8005ca8:	20000a64 	.word	0x20000a64

08005cac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cb6:	4b21      	ldr	r3, [pc, #132]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0x90>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cbc:	4b20      	ldr	r3, [pc, #128]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe f994 	bl	8003ff0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d10a      	bne.n	8005ce6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4819      	ldr	r0, [pc, #100]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ce0:	f7fe f929 	bl	8003f36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ce4:	e026      	b.n	8005d34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4413      	add	r3, r2
 8005cec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cee:	4b14      	ldr	r3, [pc, #80]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d209      	bcs.n	8005d12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cfe:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b0f      	ldr	r3, [pc, #60]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f7fe f937 	bl	8003f7e <vListInsert>
}
 8005d10:	e010      	b.n	8005d34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d12:	4b0e      	ldr	r3, [pc, #56]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f7fe f92d 	bl	8003f7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d24:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d202      	bcs.n	8005d34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d2e:	4a08      	ldr	r2, [pc, #32]	@ (8005d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6013      	str	r3, [r2, #0]
}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000f38 	.word	0x20000f38
 8005d40:	20000a60 	.word	0x20000a60
 8005d44:	20000f20 	.word	0x20000f20
 8005d48:	20000ef0 	.word	0x20000ef0
 8005d4c:	20000eec 	.word	0x20000eec
 8005d50:	20000f54 	.word	0x20000f54

08005d54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	@ 0x28
 8005d58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d5e:	f000 fb13 	bl	8006388 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d62:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <xTimerCreateTimerTask+0x84>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d021      	beq.n	8005dae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d72:	1d3a      	adds	r2, r7, #4
 8005d74:	f107 0108 	add.w	r1, r7, #8
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fd fea5 	bl	8003acc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	9202      	str	r2, [sp, #8]
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	2300      	movs	r3, #0
 8005d92:	460a      	mov	r2, r1
 8005d94:	4911      	ldr	r1, [pc, #68]	@ (8005ddc <xTimerCreateTimerTask+0x88>)
 8005d96:	4812      	ldr	r0, [pc, #72]	@ (8005de0 <xTimerCreateTimerTask+0x8c>)
 8005d98:	f7ff f8a2 	bl	8004ee0 <xTaskCreateStatic>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	4a11      	ldr	r2, [pc, #68]	@ (8005de4 <xTimerCreateTimerTask+0x90>)
 8005da0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005da2:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <xTimerCreateTimerTask+0x90>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	613b      	str	r3, [r7, #16]
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005dcc:	697b      	ldr	r3, [r7, #20]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000f90 	.word	0x20000f90
 8005ddc:	080068c0 	.word	0x080068c0
 8005de0:	08005f21 	.word	0x08005f21
 8005de4:	20000f94 	.word	0x20000f94

08005de8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	@ 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10b      	bne.n	8005e18 <xTimerGenericCommand+0x30>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	623b      	str	r3, [r7, #32]
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e18:	4b19      	ldr	r3, [pc, #100]	@ (8005e80 <xTimerGenericCommand+0x98>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d02a      	beq.n	8005e76 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	dc18      	bgt.n	8005e64 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e32:	f7ff fead 	bl	8005b90 <xTaskGetSchedulerState>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d109      	bne.n	8005e50 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e3c:	4b10      	ldr	r3, [pc, #64]	@ (8005e80 <xTimerGenericCommand+0x98>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	f107 0110 	add.w	r1, r7, #16
 8005e44:	2300      	movs	r3, #0
 8005e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e48:	f7fe fc5a 	bl	8004700 <xQueueGenericSend>
 8005e4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e4e:	e012      	b.n	8005e76 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e50:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <xTimerGenericCommand+0x98>)
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	f107 0110 	add.w	r1, r7, #16
 8005e58:	2300      	movs	r3, #0
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f7fe fc50 	bl	8004700 <xQueueGenericSend>
 8005e60:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e62:	e008      	b.n	8005e76 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e64:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <xTimerGenericCommand+0x98>)
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	f107 0110 	add.w	r1, r7, #16
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	f7fe fd48 	bl	8004904 <xQueueGenericSendFromISR>
 8005e74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3728      	adds	r7, #40	@ 0x28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	20000f90 	.word	0x20000f90

08005e84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8e:	4b23      	ldr	r3, [pc, #140]	@ (8005f1c <prvProcessExpiredTimer+0x98>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe f8a7 	bl	8003ff0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d023      	beq.n	8005ef8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	18d1      	adds	r1, r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	6978      	ldr	r0, [r7, #20]
 8005ebe:	f000 f8d5 	bl	800606c <prvInsertTimerInActiveList>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d020      	beq.n	8005f0a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ec8:	2300      	movs	r3, #0
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	6978      	ldr	r0, [r7, #20]
 8005ed4:	f7ff ff88 	bl	8005de8 <xTimerGenericCommand>
 8005ed8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d114      	bne.n	8005f0a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	60fb      	str	r3, [r7, #12]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005efe:	f023 0301 	bic.w	r3, r3, #1
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	6978      	ldr	r0, [r7, #20]
 8005f10:	4798      	blx	r3
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000f88 	.word	0x20000f88

08005f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f28:	f107 0308 	add.w	r3, r7, #8
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f859 	bl	8005fe4 <prvGetNextExpireTime>
 8005f32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4619      	mov	r1, r3
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f805 	bl	8005f48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f3e:	f000 f8d7 	bl	80060f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f42:	bf00      	nop
 8005f44:	e7f0      	b.n	8005f28 <prvTimerTask+0x8>
	...

08005f48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f52:	f7ff fa29 	bl	80053a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f56:	f107 0308 	add.w	r3, r7, #8
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f866 	bl	800602c <prvSampleTimeNow>
 8005f60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d130      	bne.n	8005fca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <prvProcessTimerOrBlockTask+0x3c>
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d806      	bhi.n	8005f84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f76:	f7ff fa25 	bl	80053c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ff81 	bl	8005e84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f82:	e024      	b.n	8005fce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f8a:	4b13      	ldr	r3, [pc, #76]	@ (8005fd8 <prvProcessTimerOrBlockTask+0x90>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <prvProcessTimerOrBlockTask+0x50>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <prvProcessTimerOrBlockTask+0x52>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005fdc <prvProcessTimerOrBlockTask+0x94>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f7fe ff65 	bl	8004e78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fae:	f7ff fa09 	bl	80053c4 <xTaskResumeAll>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005fb8:	4b09      	ldr	r3, [pc, #36]	@ (8005fe0 <prvProcessTimerOrBlockTask+0x98>)
 8005fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	f3bf 8f6f 	isb	sy
}
 8005fc8:	e001      	b.n	8005fce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005fca:	f7ff f9fb 	bl	80053c4 <xTaskResumeAll>
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000f8c 	.word	0x20000f8c
 8005fdc:	20000f90 	.word	0x20000f90
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fec:	4b0e      	ldr	r3, [pc, #56]	@ (8006028 <prvGetNextExpireTime+0x44>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <prvGetNextExpireTime+0x16>
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	e000      	b.n	8005ffc <prvGetNextExpireTime+0x18>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006008:	4b07      	ldr	r3, [pc, #28]	@ (8006028 <prvGetNextExpireTime+0x44>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	e001      	b.n	8006018 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006018:	68fb      	ldr	r3, [r7, #12]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000f88 	.word	0x20000f88

0800602c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006034:	f7ff fa64 	bl	8005500 <xTaskGetTickCount>
 8006038:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800603a:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <prvSampleTimeNow+0x3c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	429a      	cmp	r2, r3
 8006042:	d205      	bcs.n	8006050 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006044:	f000 f93a 	bl	80062bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e002      	b.n	8006056 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006056:	4a04      	ldr	r2, [pc, #16]	@ (8006068 <prvSampleTimeNow+0x3c>)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800605c:	68fb      	ldr	r3, [r7, #12]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000f98 	.word	0x20000f98

0800606c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d812      	bhi.n	80060b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	1ad2      	subs	r2, r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	429a      	cmp	r2, r3
 800609e:	d302      	bcc.n	80060a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	e01b      	b.n	80060de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060a6:	4b10      	ldr	r3, [pc, #64]	@ (80060e8 <prvInsertTimerInActiveList+0x7c>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f7fd ff64 	bl	8003f7e <vListInsert>
 80060b6:	e012      	b.n	80060de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d206      	bcs.n	80060ce <prvInsertTimerInActiveList+0x62>
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d302      	bcc.n	80060ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e007      	b.n	80060de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060ce:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <prvInsertTimerInActiveList+0x80>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f7fd ff50 	bl	8003f7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060de:	697b      	ldr	r3, [r7, #20]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20000f8c 	.word	0x20000f8c
 80060ec:	20000f88 	.word	0x20000f88

080060f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08e      	sub	sp, #56	@ 0x38
 80060f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060f6:	e0ce      	b.n	8006296 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da19      	bge.n	8006132 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060fe:	1d3b      	adds	r3, r7, #4
 8006100:	3304      	adds	r3, #4
 8006102:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	61fb      	str	r3, [r7, #28]
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	e7fd      	b.n	800611e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006128:	6850      	ldr	r0, [r2, #4]
 800612a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800612c:	6892      	ldr	r2, [r2, #8]
 800612e:	4611      	mov	r1, r2
 8006130:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f2c0 80ae 	blt.w	8006296 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d004      	beq.n	8006150 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006148:	3304      	adds	r3, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f7fd ff50 	bl	8003ff0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006150:	463b      	mov	r3, r7
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff ff6a 	bl	800602c <prvSampleTimeNow>
 8006158:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b09      	cmp	r3, #9
 800615e:	f200 8097 	bhi.w	8006290 <prvProcessReceivedCommands+0x1a0>
 8006162:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <prvProcessReceivedCommands+0x78>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	08006191 	.word	0x08006191
 800616c:	08006191 	.word	0x08006191
 8006170:	08006191 	.word	0x08006191
 8006174:	08006207 	.word	0x08006207
 8006178:	0800621b 	.word	0x0800621b
 800617c:	08006267 	.word	0x08006267
 8006180:	08006191 	.word	0x08006191
 8006184:	08006191 	.word	0x08006191
 8006188:	08006207 	.word	0x08006207
 800618c:	0800621b 	.word	0x0800621b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	18d1      	adds	r1, r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061b0:	f7ff ff5c 	bl	800606c <prvInsertTimerInActiveList>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d06c      	beq.n	8006294 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d061      	beq.n	8006294 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	441a      	add	r2, r3
 80061d8:	2300      	movs	r3, #0
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2300      	movs	r3, #0
 80061de:	2100      	movs	r1, #0
 80061e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061e2:	f7ff fe01 	bl	8005de8 <xTimerGenericCommand>
 80061e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d152      	bne.n	8006294 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	61bb      	str	r3, [r7, #24]
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	e7fd      	b.n	8006202 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800620c:	f023 0301 	bic.w	r3, r3, #1
 8006210:	b2da      	uxtb	r2, r3
 8006212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006214:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006218:	e03d      	b.n	8006296 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006228:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	617b      	str	r3, [r7, #20]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	18d1      	adds	r1, r2, r3
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800625e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006260:	f7ff ff04 	bl	800606c <prvInsertTimerInActiveList>
					break;
 8006264:	e017      	b.n	8006296 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006276:	f7fd fd11 	bl	8003c9c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800627a:	e00c      	b.n	8006296 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800627c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	b2da      	uxtb	r2, r3
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800628e:	e002      	b.n	8006296 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006290:	bf00      	nop
 8006292:	e000      	b.n	8006296 <prvProcessReceivedCommands+0x1a6>
					break;
 8006294:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006296:	4b08      	ldr	r3, [pc, #32]	@ (80062b8 <prvProcessReceivedCommands+0x1c8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	1d39      	adds	r1, r7, #4
 800629c:	2200      	movs	r2, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe fbce 	bl	8004a40 <xQueueReceive>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f47f af26 	bne.w	80060f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	3730      	adds	r7, #48	@ 0x30
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000f90 	.word	0x20000f90

080062bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062c2:	e049      	b.n	8006358 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006380 <prvSwitchTimerLists+0xc4>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006380 <prvSwitchTimerLists+0xc4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3304      	adds	r3, #4
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fd fe87 	bl	8003ff0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d02f      	beq.n	8006358 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4413      	add	r3, r2
 8006300:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	429a      	cmp	r2, r3
 8006308:	d90e      	bls.n	8006328 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006316:	4b1a      	ldr	r3, [pc, #104]	@ (8006380 <prvSwitchTimerLists+0xc4>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7fd fe2c 	bl	8003f7e <vListInsert>
 8006326:	e017      	b.n	8006358 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006328:	2300      	movs	r3, #0
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	2100      	movs	r1, #0
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff fd58 	bl	8005de8 <xTimerGenericCommand>
 8006338:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10b      	bne.n	8006358 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	603b      	str	r3, [r7, #0]
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006358:	4b09      	ldr	r3, [pc, #36]	@ (8006380 <prvSwitchTimerLists+0xc4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1b0      	bne.n	80062c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006362:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <prvSwitchTimerLists+0xc4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006368:	4b06      	ldr	r3, [pc, #24]	@ (8006384 <prvSwitchTimerLists+0xc8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a04      	ldr	r2, [pc, #16]	@ (8006380 <prvSwitchTimerLists+0xc4>)
 800636e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006370:	4a04      	ldr	r2, [pc, #16]	@ (8006384 <prvSwitchTimerLists+0xc8>)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	6013      	str	r3, [r2, #0]
}
 8006376:	bf00      	nop
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000f88 	.word	0x20000f88
 8006384:	20000f8c 	.word	0x20000f8c

08006388 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800638e:	f7fd ff8b 	bl	80042a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006392:	4b15      	ldr	r3, [pc, #84]	@ (80063e8 <prvCheckForValidListAndQueue+0x60>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d120      	bne.n	80063dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800639a:	4814      	ldr	r0, [pc, #80]	@ (80063ec <prvCheckForValidListAndQueue+0x64>)
 800639c:	f7fd fd9e 	bl	8003edc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063a0:	4813      	ldr	r0, [pc, #76]	@ (80063f0 <prvCheckForValidListAndQueue+0x68>)
 80063a2:	f7fd fd9b 	bl	8003edc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063a6:	4b13      	ldr	r3, [pc, #76]	@ (80063f4 <prvCheckForValidListAndQueue+0x6c>)
 80063a8:	4a10      	ldr	r2, [pc, #64]	@ (80063ec <prvCheckForValidListAndQueue+0x64>)
 80063aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063ac:	4b12      	ldr	r3, [pc, #72]	@ (80063f8 <prvCheckForValidListAndQueue+0x70>)
 80063ae:	4a10      	ldr	r2, [pc, #64]	@ (80063f0 <prvCheckForValidListAndQueue+0x68>)
 80063b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063b2:	2300      	movs	r3, #0
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	4b11      	ldr	r3, [pc, #68]	@ (80063fc <prvCheckForValidListAndQueue+0x74>)
 80063b8:	4a11      	ldr	r2, [pc, #68]	@ (8006400 <prvCheckForValidListAndQueue+0x78>)
 80063ba:	2110      	movs	r1, #16
 80063bc:	200a      	movs	r0, #10
 80063be:	f7fe f8ff 	bl	80045c0 <xQueueGenericCreateStatic>
 80063c2:	4603      	mov	r3, r0
 80063c4:	4a08      	ldr	r2, [pc, #32]	@ (80063e8 <prvCheckForValidListAndQueue+0x60>)
 80063c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063c8:	4b07      	ldr	r3, [pc, #28]	@ (80063e8 <prvCheckForValidListAndQueue+0x60>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063d0:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <prvCheckForValidListAndQueue+0x60>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	490b      	ldr	r1, [pc, #44]	@ (8006404 <prvCheckForValidListAndQueue+0x7c>)
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fd24 	bl	8004e24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063dc:	f7fd ff96 	bl	800430c <vPortExitCritical>
}
 80063e0:	bf00      	nop
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000f90 	.word	0x20000f90
 80063ec:	20000f60 	.word	0x20000f60
 80063f0:	20000f74 	.word	0x20000f74
 80063f4:	20000f88 	.word	0x20000f88
 80063f8:	20000f8c 	.word	0x20000f8c
 80063fc:	2000103c 	.word	0x2000103c
 8006400:	20000f9c 	.word	0x20000f9c
 8006404:	080068c8 	.word	0x080068c8

08006408 <__malloc_lock>:
 8006408:	4801      	ldr	r0, [pc, #4]	@ (8006410 <__malloc_lock+0x8>)
 800640a:	f000 b88b 	b.w	8006524 <__retarget_lock_acquire_recursive>
 800640e:	bf00      	nop
 8006410:	200012c8 	.word	0x200012c8

08006414 <__malloc_unlock>:
 8006414:	4801      	ldr	r0, [pc, #4]	@ (800641c <__malloc_unlock+0x8>)
 8006416:	f000 b886 	b.w	8006526 <__retarget_lock_release_recursive>
 800641a:	bf00      	nop
 800641c:	200012c8 	.word	0x200012c8

08006420 <memset>:
 8006420:	4402      	add	r2, r0
 8006422:	4603      	mov	r3, r0
 8006424:	4293      	cmp	r3, r2
 8006426:	d100      	bne.n	800642a <memset+0xa>
 8006428:	4770      	bx	lr
 800642a:	f803 1b01 	strb.w	r1, [r3], #1
 800642e:	e7f9      	b.n	8006424 <memset+0x4>

08006430 <_reclaim_reent>:
 8006430:	4b29      	ldr	r3, [pc, #164]	@ (80064d8 <_reclaim_reent+0xa8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4283      	cmp	r3, r0
 8006436:	b570      	push	{r4, r5, r6, lr}
 8006438:	4604      	mov	r4, r0
 800643a:	d04b      	beq.n	80064d4 <_reclaim_reent+0xa4>
 800643c:	69c3      	ldr	r3, [r0, #28]
 800643e:	b1ab      	cbz	r3, 800646c <_reclaim_reent+0x3c>
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	b16b      	cbz	r3, 8006460 <_reclaim_reent+0x30>
 8006444:	2500      	movs	r5, #0
 8006446:	69e3      	ldr	r3, [r4, #28]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	5959      	ldr	r1, [r3, r5]
 800644c:	2900      	cmp	r1, #0
 800644e:	d13b      	bne.n	80064c8 <_reclaim_reent+0x98>
 8006450:	3504      	adds	r5, #4
 8006452:	2d80      	cmp	r5, #128	@ 0x80
 8006454:	d1f7      	bne.n	8006446 <_reclaim_reent+0x16>
 8006456:	69e3      	ldr	r3, [r4, #28]
 8006458:	4620      	mov	r0, r4
 800645a:	68d9      	ldr	r1, [r3, #12]
 800645c:	f000 f872 	bl	8006544 <_free_r>
 8006460:	69e3      	ldr	r3, [r4, #28]
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	b111      	cbz	r1, 800646c <_reclaim_reent+0x3c>
 8006466:	4620      	mov	r0, r4
 8006468:	f000 f86c 	bl	8006544 <_free_r>
 800646c:	6961      	ldr	r1, [r4, #20]
 800646e:	b111      	cbz	r1, 8006476 <_reclaim_reent+0x46>
 8006470:	4620      	mov	r0, r4
 8006472:	f000 f867 	bl	8006544 <_free_r>
 8006476:	69e1      	ldr	r1, [r4, #28]
 8006478:	b111      	cbz	r1, 8006480 <_reclaim_reent+0x50>
 800647a:	4620      	mov	r0, r4
 800647c:	f000 f862 	bl	8006544 <_free_r>
 8006480:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006482:	b111      	cbz	r1, 800648a <_reclaim_reent+0x5a>
 8006484:	4620      	mov	r0, r4
 8006486:	f000 f85d 	bl	8006544 <_free_r>
 800648a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800648c:	b111      	cbz	r1, 8006494 <_reclaim_reent+0x64>
 800648e:	4620      	mov	r0, r4
 8006490:	f000 f858 	bl	8006544 <_free_r>
 8006494:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006496:	b111      	cbz	r1, 800649e <_reclaim_reent+0x6e>
 8006498:	4620      	mov	r0, r4
 800649a:	f000 f853 	bl	8006544 <_free_r>
 800649e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80064a0:	b111      	cbz	r1, 80064a8 <_reclaim_reent+0x78>
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 f84e 	bl	8006544 <_free_r>
 80064a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80064aa:	b111      	cbz	r1, 80064b2 <_reclaim_reent+0x82>
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 f849 	bl	8006544 <_free_r>
 80064b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80064b4:	b111      	cbz	r1, 80064bc <_reclaim_reent+0x8c>
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 f844 	bl	8006544 <_free_r>
 80064bc:	6a23      	ldr	r3, [r4, #32]
 80064be:	b14b      	cbz	r3, 80064d4 <_reclaim_reent+0xa4>
 80064c0:	4620      	mov	r0, r4
 80064c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064c6:	4718      	bx	r3
 80064c8:	680e      	ldr	r6, [r1, #0]
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 f83a 	bl	8006544 <_free_r>
 80064d0:	4631      	mov	r1, r6
 80064d2:	e7bb      	b.n	800644c <_reclaim_reent+0x1c>
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
 80064d6:	bf00      	nop
 80064d8:	20000010 	.word	0x20000010

080064dc <__libc_init_array>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	4d0d      	ldr	r5, [pc, #52]	@ (8006514 <__libc_init_array+0x38>)
 80064e0:	4c0d      	ldr	r4, [pc, #52]	@ (8006518 <__libc_init_array+0x3c>)
 80064e2:	1b64      	subs	r4, r4, r5
 80064e4:	10a4      	asrs	r4, r4, #2
 80064e6:	2600      	movs	r6, #0
 80064e8:	42a6      	cmp	r6, r4
 80064ea:	d109      	bne.n	8006500 <__libc_init_array+0x24>
 80064ec:	4d0b      	ldr	r5, [pc, #44]	@ (800651c <__libc_init_array+0x40>)
 80064ee:	4c0c      	ldr	r4, [pc, #48]	@ (8006520 <__libc_init_array+0x44>)
 80064f0:	f000 f9d0 	bl	8006894 <_init>
 80064f4:	1b64      	subs	r4, r4, r5
 80064f6:	10a4      	asrs	r4, r4, #2
 80064f8:	2600      	movs	r6, #0
 80064fa:	42a6      	cmp	r6, r4
 80064fc:	d105      	bne.n	800650a <__libc_init_array+0x2e>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	f855 3b04 	ldr.w	r3, [r5], #4
 8006504:	4798      	blx	r3
 8006506:	3601      	adds	r6, #1
 8006508:	e7ee      	b.n	80064e8 <__libc_init_array+0xc>
 800650a:	f855 3b04 	ldr.w	r3, [r5], #4
 800650e:	4798      	blx	r3
 8006510:	3601      	adds	r6, #1
 8006512:	e7f2      	b.n	80064fa <__libc_init_array+0x1e>
 8006514:	0800691c 	.word	0x0800691c
 8006518:	0800691c 	.word	0x0800691c
 800651c:	0800691c 	.word	0x0800691c
 8006520:	08006920 	.word	0x08006920

08006524 <__retarget_lock_acquire_recursive>:
 8006524:	4770      	bx	lr

08006526 <__retarget_lock_release_recursive>:
 8006526:	4770      	bx	lr

08006528 <memcpy>:
 8006528:	440a      	add	r2, r1
 800652a:	4291      	cmp	r1, r2
 800652c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006530:	d100      	bne.n	8006534 <memcpy+0xc>
 8006532:	4770      	bx	lr
 8006534:	b510      	push	{r4, lr}
 8006536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800653a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800653e:	4291      	cmp	r1, r2
 8006540:	d1f9      	bne.n	8006536 <memcpy+0xe>
 8006542:	bd10      	pop	{r4, pc}

08006544 <_free_r>:
 8006544:	b538      	push	{r3, r4, r5, lr}
 8006546:	4605      	mov	r5, r0
 8006548:	2900      	cmp	r1, #0
 800654a:	d041      	beq.n	80065d0 <_free_r+0x8c>
 800654c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006550:	1f0c      	subs	r4, r1, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfb8      	it	lt
 8006556:	18e4      	addlt	r4, r4, r3
 8006558:	f7ff ff56 	bl	8006408 <__malloc_lock>
 800655c:	4a1d      	ldr	r2, [pc, #116]	@ (80065d4 <_free_r+0x90>)
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	b933      	cbnz	r3, 8006570 <_free_r+0x2c>
 8006562:	6063      	str	r3, [r4, #4]
 8006564:	6014      	str	r4, [r2, #0]
 8006566:	4628      	mov	r0, r5
 8006568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800656c:	f7ff bf52 	b.w	8006414 <__malloc_unlock>
 8006570:	42a3      	cmp	r3, r4
 8006572:	d908      	bls.n	8006586 <_free_r+0x42>
 8006574:	6820      	ldr	r0, [r4, #0]
 8006576:	1821      	adds	r1, r4, r0
 8006578:	428b      	cmp	r3, r1
 800657a:	bf01      	itttt	eq
 800657c:	6819      	ldreq	r1, [r3, #0]
 800657e:	685b      	ldreq	r3, [r3, #4]
 8006580:	1809      	addeq	r1, r1, r0
 8006582:	6021      	streq	r1, [r4, #0]
 8006584:	e7ed      	b.n	8006562 <_free_r+0x1e>
 8006586:	461a      	mov	r2, r3
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b10b      	cbz	r3, 8006590 <_free_r+0x4c>
 800658c:	42a3      	cmp	r3, r4
 800658e:	d9fa      	bls.n	8006586 <_free_r+0x42>
 8006590:	6811      	ldr	r1, [r2, #0]
 8006592:	1850      	adds	r0, r2, r1
 8006594:	42a0      	cmp	r0, r4
 8006596:	d10b      	bne.n	80065b0 <_free_r+0x6c>
 8006598:	6820      	ldr	r0, [r4, #0]
 800659a:	4401      	add	r1, r0
 800659c:	1850      	adds	r0, r2, r1
 800659e:	4283      	cmp	r3, r0
 80065a0:	6011      	str	r1, [r2, #0]
 80065a2:	d1e0      	bne.n	8006566 <_free_r+0x22>
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	6053      	str	r3, [r2, #4]
 80065aa:	4408      	add	r0, r1
 80065ac:	6010      	str	r0, [r2, #0]
 80065ae:	e7da      	b.n	8006566 <_free_r+0x22>
 80065b0:	d902      	bls.n	80065b8 <_free_r+0x74>
 80065b2:	230c      	movs	r3, #12
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	e7d6      	b.n	8006566 <_free_r+0x22>
 80065b8:	6820      	ldr	r0, [r4, #0]
 80065ba:	1821      	adds	r1, r4, r0
 80065bc:	428b      	cmp	r3, r1
 80065be:	bf04      	itt	eq
 80065c0:	6819      	ldreq	r1, [r3, #0]
 80065c2:	685b      	ldreq	r3, [r3, #4]
 80065c4:	6063      	str	r3, [r4, #4]
 80065c6:	bf04      	itt	eq
 80065c8:	1809      	addeq	r1, r1, r0
 80065ca:	6021      	streq	r1, [r4, #0]
 80065cc:	6054      	str	r4, [r2, #4]
 80065ce:	e7ca      	b.n	8006566 <_free_r+0x22>
 80065d0:	bd38      	pop	{r3, r4, r5, pc}
 80065d2:	bf00      	nop
 80065d4:	2000118c 	.word	0x2000118c

080065d8 <__udivmoddi4>:
 80065d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	9d08      	ldr	r5, [sp, #32]
 80065de:	460e      	mov	r6, r1
 80065e0:	4604      	mov	r4, r0
 80065e2:	460f      	mov	r7, r1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d14a      	bne.n	800667e <__udivmoddi4+0xa6>
 80065e8:	4694      	mov	ip, r2
 80065ea:	458c      	cmp	ip, r1
 80065ec:	fab2 f282 	clz	r2, r2
 80065f0:	d960      	bls.n	80066b4 <__udivmoddi4+0xdc>
 80065f2:	b142      	cbz	r2, 8006606 <__udivmoddi4+0x2e>
 80065f4:	f1c2 0320 	rsb	r3, r2, #32
 80065f8:	4097      	lsls	r7, r2
 80065fa:	fa20 f303 	lsr.w	r3, r0, r3
 80065fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8006602:	431f      	orrs	r7, r3
 8006604:	4094      	lsls	r4, r2
 8006606:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800660a:	fa1f f68c 	uxth.w	r6, ip
 800660e:	fbb7 f1fe 	udiv	r1, r7, lr
 8006612:	0c23      	lsrs	r3, r4, #16
 8006614:	fb0e 7711 	mls	r7, lr, r1, r7
 8006618:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800661c:	fb01 f006 	mul.w	r0, r1, r6
 8006620:	4298      	cmp	r0, r3
 8006622:	d90a      	bls.n	800663a <__udivmoddi4+0x62>
 8006624:	eb1c 0303 	adds.w	r3, ip, r3
 8006628:	f101 37ff 	add.w	r7, r1, #4294967295
 800662c:	f080 8115 	bcs.w	800685a <__udivmoddi4+0x282>
 8006630:	4298      	cmp	r0, r3
 8006632:	f240 8112 	bls.w	800685a <__udivmoddi4+0x282>
 8006636:	3902      	subs	r1, #2
 8006638:	4463      	add	r3, ip
 800663a:	1a1b      	subs	r3, r3, r0
 800663c:	b2a4      	uxth	r4, r4
 800663e:	fbb3 f0fe 	udiv	r0, r3, lr
 8006642:	fb0e 3310 	mls	r3, lr, r0, r3
 8006646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800664a:	fb00 f606 	mul.w	r6, r0, r6
 800664e:	42a6      	cmp	r6, r4
 8006650:	d90a      	bls.n	8006668 <__udivmoddi4+0x90>
 8006652:	eb1c 0404 	adds.w	r4, ip, r4
 8006656:	f100 33ff 	add.w	r3, r0, #4294967295
 800665a:	f080 8100 	bcs.w	800685e <__udivmoddi4+0x286>
 800665e:	42a6      	cmp	r6, r4
 8006660:	f240 80fd 	bls.w	800685e <__udivmoddi4+0x286>
 8006664:	4464      	add	r4, ip
 8006666:	3802      	subs	r0, #2
 8006668:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800666c:	1ba4      	subs	r4, r4, r6
 800666e:	2100      	movs	r1, #0
 8006670:	b11d      	cbz	r5, 800667a <__udivmoddi4+0xa2>
 8006672:	40d4      	lsrs	r4, r2
 8006674:	2300      	movs	r3, #0
 8006676:	e9c5 4300 	strd	r4, r3, [r5]
 800667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667e:	428b      	cmp	r3, r1
 8006680:	d905      	bls.n	800668e <__udivmoddi4+0xb6>
 8006682:	b10d      	cbz	r5, 8006688 <__udivmoddi4+0xb0>
 8006684:	e9c5 0100 	strd	r0, r1, [r5]
 8006688:	2100      	movs	r1, #0
 800668a:	4608      	mov	r0, r1
 800668c:	e7f5      	b.n	800667a <__udivmoddi4+0xa2>
 800668e:	fab3 f183 	clz	r1, r3
 8006692:	2900      	cmp	r1, #0
 8006694:	d146      	bne.n	8006724 <__udivmoddi4+0x14c>
 8006696:	42b3      	cmp	r3, r6
 8006698:	d302      	bcc.n	80066a0 <__udivmoddi4+0xc8>
 800669a:	4282      	cmp	r2, r0
 800669c:	f200 80f5 	bhi.w	800688a <__udivmoddi4+0x2b2>
 80066a0:	1a84      	subs	r4, r0, r2
 80066a2:	eb66 0203 	sbc.w	r2, r6, r3
 80066a6:	2001      	movs	r0, #1
 80066a8:	4617      	mov	r7, r2
 80066aa:	2d00      	cmp	r5, #0
 80066ac:	d0e5      	beq.n	800667a <__udivmoddi4+0xa2>
 80066ae:	e9c5 4700 	strd	r4, r7, [r5]
 80066b2:	e7e2      	b.n	800667a <__udivmoddi4+0xa2>
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	f040 8093 	bne.w	80067e0 <__udivmoddi4+0x208>
 80066ba:	eba1 030c 	sub.w	r3, r1, ip
 80066be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80066c2:	fa1f fe8c 	uxth.w	lr, ip
 80066c6:	2101      	movs	r1, #1
 80066c8:	fbb3 f6f7 	udiv	r6, r3, r7
 80066cc:	fb07 3016 	mls	r0, r7, r6, r3
 80066d0:	0c23      	lsrs	r3, r4, #16
 80066d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066d6:	fb0e f006 	mul.w	r0, lr, r6
 80066da:	4298      	cmp	r0, r3
 80066dc:	d908      	bls.n	80066f0 <__udivmoddi4+0x118>
 80066de:	eb1c 0303 	adds.w	r3, ip, r3
 80066e2:	f106 38ff 	add.w	r8, r6, #4294967295
 80066e6:	d202      	bcs.n	80066ee <__udivmoddi4+0x116>
 80066e8:	4298      	cmp	r0, r3
 80066ea:	f200 80d0 	bhi.w	800688e <__udivmoddi4+0x2b6>
 80066ee:	4646      	mov	r6, r8
 80066f0:	1a1b      	subs	r3, r3, r0
 80066f2:	b2a4      	uxth	r4, r4
 80066f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80066f8:	fb07 3310 	mls	r3, r7, r0, r3
 80066fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006700:	fb0e fe00 	mul.w	lr, lr, r0
 8006704:	45a6      	cmp	lr, r4
 8006706:	d908      	bls.n	800671a <__udivmoddi4+0x142>
 8006708:	eb1c 0404 	adds.w	r4, ip, r4
 800670c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006710:	d202      	bcs.n	8006718 <__udivmoddi4+0x140>
 8006712:	45a6      	cmp	lr, r4
 8006714:	f200 80b6 	bhi.w	8006884 <__udivmoddi4+0x2ac>
 8006718:	4618      	mov	r0, r3
 800671a:	eba4 040e 	sub.w	r4, r4, lr
 800671e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006722:	e7a5      	b.n	8006670 <__udivmoddi4+0x98>
 8006724:	f1c1 0720 	rsb	r7, r1, #32
 8006728:	408b      	lsls	r3, r1
 800672a:	fa22 fc07 	lsr.w	ip, r2, r7
 800672e:	ea4c 0c03 	orr.w	ip, ip, r3
 8006732:	fa06 fe01 	lsl.w	lr, r6, r1
 8006736:	fa20 f407 	lsr.w	r4, r0, r7
 800673a:	fa26 f307 	lsr.w	r3, r6, r7
 800673e:	ea44 040e 	orr.w	r4, r4, lr
 8006742:	fa00 f801 	lsl.w	r8, r0, r1
 8006746:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800674a:	ea4f 4914 	mov.w	r9, r4, lsr #16
 800674e:	fbb3 fef0 	udiv	lr, r3, r0
 8006752:	fa1f f68c 	uxth.w	r6, ip
 8006756:	fb00 331e 	mls	r3, r0, lr, r3
 800675a:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800675e:	fb0e f906 	mul.w	r9, lr, r6
 8006762:	4599      	cmp	r9, r3
 8006764:	fa02 f201 	lsl.w	r2, r2, r1
 8006768:	d90b      	bls.n	8006782 <__udivmoddi4+0x1aa>
 800676a:	eb1c 0303 	adds.w	r3, ip, r3
 800676e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8006772:	f080 8085 	bcs.w	8006880 <__udivmoddi4+0x2a8>
 8006776:	4599      	cmp	r9, r3
 8006778:	f240 8082 	bls.w	8006880 <__udivmoddi4+0x2a8>
 800677c:	f1ae 0e02 	sub.w	lr, lr, #2
 8006780:	4463      	add	r3, ip
 8006782:	eba3 0909 	sub.w	r9, r3, r9
 8006786:	b2a4      	uxth	r4, r4
 8006788:	fbb9 f3f0 	udiv	r3, r9, r0
 800678c:	fb00 9913 	mls	r9, r0, r3, r9
 8006790:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8006794:	fb03 f606 	mul.w	r6, r3, r6
 8006798:	42a6      	cmp	r6, r4
 800679a:	d908      	bls.n	80067ae <__udivmoddi4+0x1d6>
 800679c:	eb1c 0404 	adds.w	r4, ip, r4
 80067a0:	f103 30ff 	add.w	r0, r3, #4294967295
 80067a4:	d268      	bcs.n	8006878 <__udivmoddi4+0x2a0>
 80067a6:	42a6      	cmp	r6, r4
 80067a8:	d966      	bls.n	8006878 <__udivmoddi4+0x2a0>
 80067aa:	3b02      	subs	r3, #2
 80067ac:	4464      	add	r4, ip
 80067ae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80067b2:	1ba4      	subs	r4, r4, r6
 80067b4:	fba0 e602 	umull	lr, r6, r0, r2
 80067b8:	42b4      	cmp	r4, r6
 80067ba:	4673      	mov	r3, lr
 80067bc:	46b1      	mov	r9, r6
 80067be:	d352      	bcc.n	8006866 <__udivmoddi4+0x28e>
 80067c0:	d04f      	beq.n	8006862 <__udivmoddi4+0x28a>
 80067c2:	b15d      	cbz	r5, 80067dc <__udivmoddi4+0x204>
 80067c4:	ebb8 0203 	subs.w	r2, r8, r3
 80067c8:	eb64 0409 	sbc.w	r4, r4, r9
 80067cc:	fa04 f707 	lsl.w	r7, r4, r7
 80067d0:	fa22 f301 	lsr.w	r3, r2, r1
 80067d4:	431f      	orrs	r7, r3
 80067d6:	40cc      	lsrs	r4, r1
 80067d8:	e9c5 7400 	strd	r7, r4, [r5]
 80067dc:	2100      	movs	r1, #0
 80067de:	e74c      	b.n	800667a <__udivmoddi4+0xa2>
 80067e0:	f1c2 0120 	rsb	r1, r2, #32
 80067e4:	fa20 f301 	lsr.w	r3, r0, r1
 80067e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80067ec:	fa26 f101 	lsr.w	r1, r6, r1
 80067f0:	4096      	lsls	r6, r2
 80067f2:	4333      	orrs	r3, r6
 80067f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80067f8:	fa1f fe8c 	uxth.w	lr, ip
 80067fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8006800:	fb07 1610 	mls	r6, r7, r0, r1
 8006804:	0c19      	lsrs	r1, r3, #16
 8006806:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 800680a:	fb00 f60e 	mul.w	r6, r0, lr
 800680e:	428e      	cmp	r6, r1
 8006810:	fa04 f402 	lsl.w	r4, r4, r2
 8006814:	d908      	bls.n	8006828 <__udivmoddi4+0x250>
 8006816:	eb1c 0101 	adds.w	r1, ip, r1
 800681a:	f100 38ff 	add.w	r8, r0, #4294967295
 800681e:	d22d      	bcs.n	800687c <__udivmoddi4+0x2a4>
 8006820:	428e      	cmp	r6, r1
 8006822:	d92b      	bls.n	800687c <__udivmoddi4+0x2a4>
 8006824:	3802      	subs	r0, #2
 8006826:	4461      	add	r1, ip
 8006828:	1b89      	subs	r1, r1, r6
 800682a:	b29b      	uxth	r3, r3
 800682c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006830:	fb07 1116 	mls	r1, r7, r6, r1
 8006834:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006838:	fb06 f10e 	mul.w	r1, r6, lr
 800683c:	4299      	cmp	r1, r3
 800683e:	d908      	bls.n	8006852 <__udivmoddi4+0x27a>
 8006840:	eb1c 0303 	adds.w	r3, ip, r3
 8006844:	f106 38ff 	add.w	r8, r6, #4294967295
 8006848:	d214      	bcs.n	8006874 <__udivmoddi4+0x29c>
 800684a:	4299      	cmp	r1, r3
 800684c:	d912      	bls.n	8006874 <__udivmoddi4+0x29c>
 800684e:	3e02      	subs	r6, #2
 8006850:	4463      	add	r3, ip
 8006852:	1a5b      	subs	r3, r3, r1
 8006854:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 8006858:	e736      	b.n	80066c8 <__udivmoddi4+0xf0>
 800685a:	4639      	mov	r1, r7
 800685c:	e6ed      	b.n	800663a <__udivmoddi4+0x62>
 800685e:	4618      	mov	r0, r3
 8006860:	e702      	b.n	8006668 <__udivmoddi4+0x90>
 8006862:	45f0      	cmp	r8, lr
 8006864:	d2ad      	bcs.n	80067c2 <__udivmoddi4+0x1ea>
 8006866:	ebbe 0302 	subs.w	r3, lr, r2
 800686a:	eb66 060c 	sbc.w	r6, r6, ip
 800686e:	3801      	subs	r0, #1
 8006870:	46b1      	mov	r9, r6
 8006872:	e7a6      	b.n	80067c2 <__udivmoddi4+0x1ea>
 8006874:	4646      	mov	r6, r8
 8006876:	e7ec      	b.n	8006852 <__udivmoddi4+0x27a>
 8006878:	4603      	mov	r3, r0
 800687a:	e798      	b.n	80067ae <__udivmoddi4+0x1d6>
 800687c:	4640      	mov	r0, r8
 800687e:	e7d3      	b.n	8006828 <__udivmoddi4+0x250>
 8006880:	46d6      	mov	lr, sl
 8006882:	e77e      	b.n	8006782 <__udivmoddi4+0x1aa>
 8006884:	4464      	add	r4, ip
 8006886:	3802      	subs	r0, #2
 8006888:	e747      	b.n	800671a <__udivmoddi4+0x142>
 800688a:	4608      	mov	r0, r1
 800688c:	e70d      	b.n	80066aa <__udivmoddi4+0xd2>
 800688e:	3e02      	subs	r6, #2
 8006890:	4463      	add	r3, ip
 8006892:	e72d      	b.n	80066f0 <__udivmoddi4+0x118>

08006894 <_init>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	bf00      	nop
 8006898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689a:	bc08      	pop	{r3}
 800689c:	469e      	mov	lr, r3
 800689e:	4770      	bx	lr

080068a0 <_fini>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr
